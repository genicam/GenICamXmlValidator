// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema to
// C++ data binding compiler for embedded systems, in the Proprietary
// License mode. You should have received a proprietary license from
// Code Synthesis Tools CC prior to generating this code. See the
// license text for conditions.
//

#ifndef GEN_API_SCHEMA_VERSION_1_1_PSKEL_HXX
#define GEN_API_SCHEMA_VERSION_1_1_PSKEL_HXX

#include <GenApi/GenApiDll.h>
#include <xsde/cxx/version.hxx>

#if (XSDE_INT_VERSION != 3020000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encodingwhile the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifdef XSDE_LONGLONG
#error the XSD/e runtime uses long long while the generated code does not (reconfigure the runtime or remove --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

// Forward declarations
//
namespace GENAPI_NAMESPACE
{
  namespace Version_1_1
  {
    class GroupType_pskel;
    class NodeType_pskel;
    class CategoryType_pskel;
    class IntegerType_pskel;
    class IntRegType_pskel;
    class MaskedIntRegType_pskel;
    class StructRegType_pskel;
    class StructEntryType_pskel;
    class CommandType_pskel;
    class BooleanType_pskel;
    class FloatType_pskel;
    class ConverterType_pskel;
    class IntConverterType_pskel;
    class FloatRegType_pskel;
    class EnumerationType_pskel;
    class EnumEntryType_pskel;
    class StringType_pskel;
    class StringRegType_pskel;
    class RegisterType_pskel;
    class SwissKnifeType_pskel;
    class IntSwissKnifeType_pskel;
    class CName_t_pskel;
    class pIndexType_pskel;
    class PortType_pskel;
    class ConfRomType_pskel;
    class TextDescType_pskel;
    class IntKeyType_pskel;
    class DcamLockType_pskel;
    class SmartFeatureAdrType_pskel;
    class ExtensionType_pskel;
    class UpperCaseString_t_pskel;
    class nonEmptyString_t_pskel;
    class CachingMode_te_pskel;
    class HexOrDecimal_t_pskel;
    class Hex_t_pskel;
    class PositiveHexOrDecimal_t_pskel;
    class nonNegativeHexOrDecimal_t_pskel;
    class IntegerLength_t_pskel;
    class FloatLength_t_pskel;
    class MergePriority_t_pskel;
    class GUID_t_pskel;
    class Sign_te_pskel;
    class SwissKnifeConversion_t_pskel;
    class NameSpace_t_pskel;
    class NameSpace_te_pskel;
    class StandardNameSpace_t_pskel;
    class IntRepresentation_t_pskel;
    class FloatRepresentation_t_pskel;
    class Access_te_pskel;
    class Endianess_te_pskel;
    class Visibility_te_pskel;
    class YesNo_t_pskel;
    class YesNo_te_pskel;
    class Slope_te_pskel;
    class Key_t_pskel;
    class DisplayNotation_t_pskel;
    class VariableName_t_pskel;
    class DocURL_t_pskel;
    class RegisterDescription_pskel;
    class ValueIndexed_pskel;
    class pValueIndexed_pskel;
    class ValueIndexed1_pskel;
    class pValueIndexed1_pskel;
    class pVariable_pskel;
    class Constant_pskel;
    class Expression_pskel;
    class pVariable1_pskel;
    class Constant1_pskel;
    class Expression1_pskel;
    class pVariable2_pskel;
    class Constant2_pskel;
    class Expression2_pskel;
    class pVariable3_pskel;
    class Constant3_pskel;
    class Expression3_pskel;
  }
}


#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

// VxWorks macro pollution cleanup
#if defined(VXWORKS)
    #undef LSB
    #undef MSB
#endif

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

namespace GENAPI_NAMESPACE
{
  namespace Version_1_1
  {
    class GroupType_pskel: public ::xsde::cxx::parser::validating::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Comment (const ::std::string&);

      // Elements.
      //
      virtual void
      sequence_next ();

      virtual void
      Node ();

      virtual void
      Category ();

      virtual void
      Integer ();

      virtual void
      IntReg ();

      virtual void
      MaskedIntReg ();

      virtual void
      Boolean ();

      virtual void
      Command ();

      virtual void
      Enumeration ();

	  virtual void
	  EnumEntry();

      virtual void
      Float ();

      virtual void
      FloatReg ();

      virtual void
      String ();

      virtual void
      StringReg ();

      virtual void
      Register ();

      virtual void
      Converter ();

      virtual void
      IntConverter ();

      virtual void
      SwissKnife ();

      virtual void
      IntSwissKnife ();

      virtual void
      Port ();

      virtual void
      ConfRom ();

      virtual void
      TextDesc ();

      virtual void
      IntKey ();

      virtual void
      AdvFeatureLock ();

      virtual void
      SmartFeature ();

      virtual void
      Group ();

      virtual void
      StructReg ();

      virtual void
      post_GroupType ();

      // Parser construction API.
      //
      void
      parsers (::xml_schema::string_pskel& /* Comment */,
               ::GENAPI_NAMESPACE::Version_1_1::NodeType_pskel& /* Node */,
               ::GENAPI_NAMESPACE::Version_1_1::CategoryType_pskel& /* Category */,
               ::GENAPI_NAMESPACE::Version_1_1::IntegerType_pskel& /* Integer */,
               ::GENAPI_NAMESPACE::Version_1_1::IntRegType_pskel& /* IntReg */,
               ::GENAPI_NAMESPACE::Version_1_1::MaskedIntRegType_pskel& /* MaskedIntReg */,
               ::GENAPI_NAMESPACE::Version_1_1::BooleanType_pskel& /* Boolean */,
               ::GENAPI_NAMESPACE::Version_1_1::CommandType_pskel& /* Command */,
               ::GENAPI_NAMESPACE::Version_1_1::EnumerationType_pskel& /* Enumeration */,
			   ::GENAPI_NAMESPACE::Version_1_1::EnumEntryType_pskel& /* EnumEntry */,
               ::GENAPI_NAMESPACE::Version_1_1::FloatType_pskel& /* Float */,
               ::GENAPI_NAMESPACE::Version_1_1::FloatRegType_pskel& /* FloatReg */,
               ::GENAPI_NAMESPACE::Version_1_1::StringType_pskel& /* String */,
               ::GENAPI_NAMESPACE::Version_1_1::StringRegType_pskel& /* StringReg */,
               ::GENAPI_NAMESPACE::Version_1_1::RegisterType_pskel& /* Register */,
               ::GENAPI_NAMESPACE::Version_1_1::ConverterType_pskel& /* Converter */,
               ::GENAPI_NAMESPACE::Version_1_1::IntConverterType_pskel& /* IntConverter */,
               ::GENAPI_NAMESPACE::Version_1_1::SwissKnifeType_pskel& /* SwissKnife */,
               ::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel& /* IntSwissKnife */,
               ::GENAPI_NAMESPACE::Version_1_1::PortType_pskel& /* Port */,
               ::GENAPI_NAMESPACE::Version_1_1::ConfRomType_pskel& /* ConfRom */,
               ::GENAPI_NAMESPACE::Version_1_1::TextDescType_pskel& /* TextDesc */,
               ::GENAPI_NAMESPACE::Version_1_1::IntKeyType_pskel& /* IntKey */,
               ::GENAPI_NAMESPACE::Version_1_1::DcamLockType_pskel& /* AdvFeatureLock */,
               ::GENAPI_NAMESPACE::Version_1_1::SmartFeatureAdrType_pskel& /* SmartFeature */,
               ::GENAPI_NAMESPACE::Version_1_1::GroupType_pskel& /* Group */,
               ::GENAPI_NAMESPACE::Version_1_1::StructRegType_pskel& /* StructReg */);

      // Individual attribute parsers.
      //
      void
      Comment_parser (::xml_schema::string_pskel&);

      // Individual element parsers.
      //
      void
      Node_parser (::GENAPI_NAMESPACE::Version_1_1::NodeType_pskel&);

      void
      Category_parser (::GENAPI_NAMESPACE::Version_1_1::CategoryType_pskel&);

      void
      Integer_parser (::GENAPI_NAMESPACE::Version_1_1::IntegerType_pskel&);

      void
      IntReg_parser (::GENAPI_NAMESPACE::Version_1_1::IntRegType_pskel&);

      void
      MaskedIntReg_parser (::GENAPI_NAMESPACE::Version_1_1::MaskedIntRegType_pskel&);

      void
      Boolean_parser (::GENAPI_NAMESPACE::Version_1_1::BooleanType_pskel&);

      void
      Command_parser (::GENAPI_NAMESPACE::Version_1_1::CommandType_pskel&);

      void
      Enumeration_parser (::GENAPI_NAMESPACE::Version_1_1::EnumerationType_pskel&);

	  void
		  EnumEntry_parser(::GENAPI_NAMESPACE::Version_1_1::EnumEntryType_pskel&);

      void
      Float_parser (::GENAPI_NAMESPACE::Version_1_1::FloatType_pskel&);

      void
      FloatReg_parser (::GENAPI_NAMESPACE::Version_1_1::FloatRegType_pskel&);

      void
      String_parser (::GENAPI_NAMESPACE::Version_1_1::StringType_pskel&);

      void
      StringReg_parser (::GENAPI_NAMESPACE::Version_1_1::StringRegType_pskel&);

      void
      Register_parser (::GENAPI_NAMESPACE::Version_1_1::RegisterType_pskel&);

      void
      Converter_parser (::GENAPI_NAMESPACE::Version_1_1::ConverterType_pskel&);

      void
      IntConverter_parser (::GENAPI_NAMESPACE::Version_1_1::IntConverterType_pskel&);

      void
      SwissKnife_parser (::GENAPI_NAMESPACE::Version_1_1::SwissKnifeType_pskel&);

      void
      IntSwissKnife_parser (::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel&);

      void
      Port_parser (::GENAPI_NAMESPACE::Version_1_1::PortType_pskel&);

      void
      ConfRom_parser (::GENAPI_NAMESPACE::Version_1_1::ConfRomType_pskel&);

      void
      TextDesc_parser (::GENAPI_NAMESPACE::Version_1_1::TextDescType_pskel&);

      void
      IntKey_parser (::GENAPI_NAMESPACE::Version_1_1::IntKeyType_pskel&);

      void
      AdvFeatureLock_parser (::GENAPI_NAMESPACE::Version_1_1::DcamLockType_pskel&);

      void
      SmartFeature_parser (::GENAPI_NAMESPACE::Version_1_1::SmartFeatureAdrType_pskel&);

      void
      Group_parser (::GENAPI_NAMESPACE::Version_1_1::GroupType_pskel&);

      void
      StructReg_parser (::GENAPI_NAMESPACE::Version_1_1::StructRegType_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      GroupType_pskel ();

      // Implementation details.
      //
      protected:
      GroupType_pskel* GroupType_impl_;
      GroupType_pskel (GroupType_pskel*, void*);

      protected:
      virtual bool
      _start_element_impl (const ::xsde::cxx::ro_string&,
                           const ::xsde::cxx::ro_string&);

      virtual bool
      _end_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::xml_schema::string_pskel* Comment_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::NodeType_pskel* Node_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CategoryType_pskel* Category_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::IntegerType_pskel* Integer_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::IntRegType_pskel* IntReg_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::MaskedIntRegType_pskel* MaskedIntReg_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::BooleanType_pskel* Boolean_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CommandType_pskel* Command_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::EnumerationType_pskel* Enumeration_parser_;
	  ::GENAPI_NAMESPACE::Version_1_1::EnumEntryType_pskel* EnumEntry_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::FloatType_pskel* Float_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::FloatRegType_pskel* FloatReg_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::StringType_pskel* String_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::StringRegType_pskel* StringReg_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::RegisterType_pskel* Register_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::ConverterType_pskel* Converter_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::IntConverterType_pskel* IntConverter_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::SwissKnifeType_pskel* SwissKnife_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel* IntSwissKnife_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::PortType_pskel* Port_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::ConfRomType_pskel* ConfRom_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::TextDescType_pskel* TextDesc_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::IntKeyType_pskel* IntKey_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::DcamLockType_pskel* AdvFeatureLock_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::SmartFeatureAdrType_pskel* SmartFeature_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::GroupType_pskel* Group_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::StructRegType_pskel* StructReg_parser_;

      public:
      struct v_state_descr_
      {
        void (::GENAPI_NAMESPACE::Version_1_1::GroupType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xsde::cxx::ro_string&,
          const ::xsde::cxx::ro_string&,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[3UL];
        unsigned long size;
      };

      protected:
      v_state_ v_state_first_;
      ::xsde::cxx::stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_1 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_0 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      protected:
      struct v_state_attr_
      {
        bool Comment;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class NodeType_pskel: public ::xsde::cxx::parser::validating::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      post_NodeType ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */,
               ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel& /* NameSpace */,
               ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel& /* MergePriority */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel& /* ExposeStatic */,
               ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel& /* Extension */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* ToolTip */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Description */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* DisplayName */,
               ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel& /* Visibility */,
               ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel& /* DocuURL */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* IsDeprecated */,
               ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel& /* EventID */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsImplemented */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsAvailable */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsLocked */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pBlockPolling */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* ImposedAccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pError */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pCastAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pInvalidator */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      NameSpace_parser (::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel&);

      void
      MergePriority_parser (::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel&);

      void
      ExposeStatic_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel&);

      // Individual element parsers.
      //
      void
      Extension_parser (::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel&);

      void
      ToolTip_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Description_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      DisplayName_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Visibility_parser (::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel&);

      void
      DocuURL_parser (::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel&);

      void
      IsDeprecated_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      EventID_parser (::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel&);

      void
      pIsImplemented_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsAvailable_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsLocked_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pBlockPolling_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      ImposedAccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pError_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pCastAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pInvalidator_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      NodeType_pskel ();

      // Implementation details.
      //
      protected:
      NodeType_pskel* NodeType_impl_;
      NodeType_pskel (NodeType_pskel*, void*);

      protected:
      virtual bool
      _start_element_impl (const ::xsde::cxx::ro_string&,
                           const ::xsde::cxx::ro_string&);

      virtual bool
      _end_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel* NameSpace_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel* MergePriority_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel* ExposeStatic_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel* Extension_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* ToolTip_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Description_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* DisplayName_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel* Visibility_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel* DocuURL_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* IsDeprecated_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel* EventID_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsImplemented_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsAvailable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsLocked_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pBlockPolling_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* ImposedAccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pError_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pCastAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pInvalidator_parser_;

      public:
      struct v_state_descr_
      {
        void (::GENAPI_NAMESPACE::Version_1_1::NodeType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xsde::cxx::ro_string&,
          const ::xsde::cxx::ro_string&,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[3UL];
        unsigned long size;
      };

      protected:
      v_state_ v_state_first_;
      ::xsde::cxx::stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_1 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_0 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class CategoryType_pskel: public ::xsde::cxx::parser::validating::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      pFeature ();

      virtual void
      post_CategoryType ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */,
               ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel& /* NameSpace */,
               ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel& /* MergePriority */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel& /* ExposeStatic */,
               ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel& /* Extension */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* ToolTip */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Description */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* DisplayName */,
               ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel& /* Visibility */,
               ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel& /* DocuURL */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* IsDeprecated */,
               ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel& /* EventID */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsImplemented */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsAvailable */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsLocked */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pBlockPolling */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* ImposedAccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pError */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pCastAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pInvalidator */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pFeature */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      NameSpace_parser (::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel&);

      void
      MergePriority_parser (::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel&);

      void
      ExposeStatic_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel&);

      // Individual element parsers.
      //
      void
      Extension_parser (::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel&);

      void
      ToolTip_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Description_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      DisplayName_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Visibility_parser (::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel&);

      void
      DocuURL_parser (::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel&);

      void
      IsDeprecated_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      EventID_parser (::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel&);

      void
      pIsImplemented_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsAvailable_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsLocked_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pBlockPolling_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      ImposedAccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pError_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pCastAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pInvalidator_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pFeature_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      CategoryType_pskel ();

      // Implementation details.
      //
      protected:
      CategoryType_pskel* CategoryType_impl_;
      CategoryType_pskel (CategoryType_pskel*, void*);

      protected:
      virtual bool
      _start_element_impl (const ::xsde::cxx::ro_string&,
                           const ::xsde::cxx::ro_string&);

      virtual bool
      _end_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel* NameSpace_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel* MergePriority_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel* ExposeStatic_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel* Extension_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* ToolTip_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Description_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* DisplayName_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel* Visibility_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel* DocuURL_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* IsDeprecated_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel* EventID_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsImplemented_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsAvailable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsLocked_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pBlockPolling_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* ImposedAccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pError_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pCastAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pInvalidator_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pFeature_parser_;

      public:
      struct v_state_descr_
      {
        void (::GENAPI_NAMESPACE::Version_1_1::CategoryType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xsde::cxx::ro_string&,
          const ::xsde::cxx::ro_string&,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[3UL];
        unsigned long size;
      };

      protected:
      v_state_ v_state_first_;
      ::xsde::cxx::stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_1 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_0 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class IntegerType_pskel: public ::xsde::cxx::parser::validating::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      Streamable ();

      enum choice_arm_tag
      {
        Value_tag,
        sequence_tag,
        sequence1_tag
      };

      virtual void
      choice_arm (choice_arm_tag);

      virtual void
      Value ();

      virtual void
      pValueCopy ();

      virtual void
      pValue ();

      virtual void
      pValueCopy1 ();

      virtual void
      pIndex ();

      enum choice1_arm_tag
      {
        ValueIndexed_tag,
        pValueIndexed_tag
      };

      virtual void
      choice1_arm (choice1_arm_tag);

      virtual void
      ValueIndexed ();

      virtual void
      pValueIndexed ();

      enum choice2_arm_tag
      {
        ValueDefault_tag,
        pValueDefault_tag
      };

      virtual void
      choice2_arm (choice2_arm_tag);

      virtual void
      ValueDefault ();

      virtual void
      pValueDefault ();

      enum choice3_arm_tag
      {
        Min_tag,
        pMin_tag
      };

      virtual void
      choice3_arm (choice3_arm_tag);

      virtual void
      Min ();

      virtual void
      pMin ();

      enum choice4_arm_tag
      {
        Max_tag,
        pMax_tag
      };

      virtual void
      choice4_arm (choice4_arm_tag);

      virtual void
      Max ();

      virtual void
      pMax ();

      enum choice5_arm_tag
      {
        Inc_tag,
        pInc_tag
      };

      virtual void
      choice5_arm (choice5_arm_tag);

      virtual void
      Inc ();

      virtual void
      pInc ();

      virtual void
      Unit ();

      virtual void
      Representation ();

      virtual void
      ValidValueSet ();

      virtual void
      pSelected ();

      virtual void
      post_IntegerType ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */,
               ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel& /* NameSpace */,
               ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel& /* MergePriority */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel& /* ExposeStatic */,
               ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel& /* Extension */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* ToolTip */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Description */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* DisplayName */,
               ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel& /* Visibility */,
               ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel& /* DocuURL */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* IsDeprecated */,
               ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel& /* EventID */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsImplemented */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsAvailable */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsLocked */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pBlockPolling */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* ImposedAccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pError */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pCastAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pInvalidator */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* Streamable */,
               ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* Value */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pValueCopy */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pValue */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pValueCopy */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIndex */,
               ::GENAPI_NAMESPACE::Version_1_1::ValueIndexed_pskel& /* ValueIndexed */,
               ::GENAPI_NAMESPACE::Version_1_1::pValueIndexed_pskel& /* pValueIndexed */,
               ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* ValueDefault */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pValueDefault */,
               ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* Min */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pMin */,
               ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* Max */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pMax */,
               ::GENAPI_NAMESPACE::Version_1_1::PositiveHexOrDecimal_t_pskel& /* Inc */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pInc */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Unit */,
               ::GENAPI_NAMESPACE::Version_1_1::IntRepresentation_t_pskel& /* Representation */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* ValidValueSet */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pSelected */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      NameSpace_parser (::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel&);

      void
      MergePriority_parser (::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel&);

      void
      ExposeStatic_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel&);

      // Individual element parsers.
      //
      void
      Extension_parser (::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel&);

      void
      ToolTip_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Description_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      DisplayName_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Visibility_parser (::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel&);

      void
      DocuURL_parser (::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel&);

      void
      IsDeprecated_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      EventID_parser (::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel&);

      void
      pIsImplemented_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsAvailable_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsLocked_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pBlockPolling_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      ImposedAccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pError_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pCastAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pInvalidator_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Streamable_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      Value_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      void
      pValueCopy_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pValue_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pValueCopy1_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIndex_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      ValueIndexed_parser (::GENAPI_NAMESPACE::Version_1_1::ValueIndexed_pskel&);

      void
      pValueIndexed_parser (::GENAPI_NAMESPACE::Version_1_1::pValueIndexed_pskel&);

      void
      ValueDefault_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      void
      pValueDefault_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Min_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      void
      pMin_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Max_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      void
      pMax_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Inc_parser (::GENAPI_NAMESPACE::Version_1_1::PositiveHexOrDecimal_t_pskel&);

      void
      pInc_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Unit_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Representation_parser (::GENAPI_NAMESPACE::Version_1_1::IntRepresentation_t_pskel&);

      void
      ValidValueSet_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      pSelected_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      IntegerType_pskel ();

      // Implementation details.
      //
      protected:
      IntegerType_pskel* IntegerType_impl_;
      IntegerType_pskel (IntegerType_pskel*, void*);

      protected:
      virtual bool
      _start_element_impl (const ::xsde::cxx::ro_string&,
                           const ::xsde::cxx::ro_string&);

      virtual bool
      _end_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel* NameSpace_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel* MergePriority_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel* ExposeStatic_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel* Extension_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* ToolTip_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Description_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* DisplayName_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel* Visibility_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel* DocuURL_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* IsDeprecated_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel* EventID_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsImplemented_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsAvailable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsLocked_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pBlockPolling_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* ImposedAccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pError_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pCastAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pInvalidator_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* Streamable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* Value_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pValueCopy_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pValue_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pValueCopy1_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIndex_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::ValueIndexed_pskel* ValueIndexed_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::pValueIndexed_pskel* pValueIndexed_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* ValueDefault_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pValueDefault_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* Min_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pMin_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* Max_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pMax_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::PositiveHexOrDecimal_t_pskel* Inc_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pInc_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Unit_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::IntRepresentation_t_pskel* Representation_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* ValidValueSet_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pSelected_parser_;

      public:
      struct v_state_descr_
      {
        void (::GENAPI_NAMESPACE::Version_1_1::IntegerType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xsde::cxx::ro_string&,
          const ::xsde::cxx::ro_string&,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[5UL];
        unsigned long size;
      };

      protected:
      v_state_ v_state_first_;
      ::xsde::cxx::stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_3 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_0 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      choice_2 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      void
      sequence_1 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_2 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      choice_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      void
      choice_1 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      void
      choice_3 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      void
      choice_4 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      void
      choice_5 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class IntRegType_pskel: public ::xsde::cxx::parser::validating::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      Streamable ();

      enum choice_arm_tag
      {
        Address_tag,
        IntSwissKnife_tag,
        pAddress_tag,
        pIndex_tag
      };

      virtual void
      choice_arm (choice_arm_tag);

      virtual void
      Address ();

      virtual void
      IntSwissKnife ();

      virtual void
      pAddress ();

      virtual void
      pIndex ();

      enum choice1_arm_tag
      {
        Length_tag,
        pLength_tag
      };

      virtual void
      choice1_arm (choice1_arm_tag);

      virtual void
      Length ();

      virtual void
      pLength ();

      virtual void
      AccessMode ();

      virtual void
      pPort ();

      virtual void
      Cachable ();

      virtual void
      PollingTime ();

      virtual void
      pInvalidator ();

      virtual void
      Sign ();

      virtual void
      Endianess ();

      virtual void
      Unit ();

      virtual void
      Representation ();

      virtual void
      pSelected ();

      virtual void
      post_IntRegType ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */,
               ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel& /* NameSpace */,
               ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel& /* MergePriority */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel& /* ExposeStatic */,
               ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel& /* Extension */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* ToolTip */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Description */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* DisplayName */,
               ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel& /* Visibility */,
               ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel& /* DocuURL */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* IsDeprecated */,
               ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel& /* EventID */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsImplemented */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsAvailable */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsLocked */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pBlockPolling */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* ImposedAccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pError */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pCastAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* Streamable */,
               ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* Address */,
               ::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel& /* IntSwissKnife */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAddress */,
               ::GENAPI_NAMESPACE::Version_1_1::pIndexType_pskel& /* pIndex */,
               ::GENAPI_NAMESPACE::Version_1_1::PositiveHexOrDecimal_t_pskel& /* Length */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pLength */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* AccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pPort */,
               ::GENAPI_NAMESPACE::Version_1_1::CachingMode_te_pskel& /* Cachable */,
               ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel& /* PollingTime */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pInvalidator */,
               ::GENAPI_NAMESPACE::Version_1_1::Sign_te_pskel& /* Sign */,
               ::GENAPI_NAMESPACE::Version_1_1::Endianess_te_pskel& /* Endianess */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Unit */,
               ::GENAPI_NAMESPACE::Version_1_1::IntRepresentation_t_pskel& /* Representation */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pSelected */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      NameSpace_parser (::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel&);

      void
      MergePriority_parser (::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel&);

      void
      ExposeStatic_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel&);

      // Individual element parsers.
      //
      void
      Extension_parser (::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel&);

      void
      ToolTip_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Description_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      DisplayName_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Visibility_parser (::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel&);

      void
      DocuURL_parser (::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel&);

      void
      IsDeprecated_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      EventID_parser (::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel&);

      void
      pIsImplemented_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsAvailable_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsLocked_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pBlockPolling_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      ImposedAccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pError_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pCastAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Streamable_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      Address_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      void
      IntSwissKnife_parser (::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel&);

      void
      pAddress_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIndex_parser (::GENAPI_NAMESPACE::Version_1_1::pIndexType_pskel&);

      void
      Length_parser (::GENAPI_NAMESPACE::Version_1_1::PositiveHexOrDecimal_t_pskel&);

      void
      pLength_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      AccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pPort_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Cachable_parser (::GENAPI_NAMESPACE::Version_1_1::CachingMode_te_pskel&);

      void
      PollingTime_parser (::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel&);

      void
      pInvalidator_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Sign_parser (::GENAPI_NAMESPACE::Version_1_1::Sign_te_pskel&);

      void
      Endianess_parser (::GENAPI_NAMESPACE::Version_1_1::Endianess_te_pskel&);

      void
      Unit_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Representation_parser (::GENAPI_NAMESPACE::Version_1_1::IntRepresentation_t_pskel&);

      void
      pSelected_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      IntRegType_pskel ();

      // Implementation details.
      //
      protected:
      IntRegType_pskel* IntRegType_impl_;
      IntRegType_pskel (IntRegType_pskel*, void*);

      protected:
      virtual bool
      _start_element_impl (const ::xsde::cxx::ro_string&,
                           const ::xsde::cxx::ro_string&);

      virtual bool
      _end_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel* NameSpace_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel* MergePriority_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel* ExposeStatic_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel* Extension_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* ToolTip_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Description_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* DisplayName_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel* Visibility_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel* DocuURL_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* IsDeprecated_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel* EventID_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsImplemented_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsAvailable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsLocked_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pBlockPolling_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* ImposedAccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pError_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pCastAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* Streamable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* Address_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel* IntSwissKnife_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAddress_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::pIndexType_pskel* pIndex_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::PositiveHexOrDecimal_t_pskel* Length_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pLength_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* AccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pPort_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CachingMode_te_pskel* Cachable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel* PollingTime_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pInvalidator_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Sign_te_pskel* Sign_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Endianess_te_pskel* Endianess_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Unit_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::IntRepresentation_t_pskel* Representation_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pSelected_parser_;

      public:
      struct v_state_descr_
      {
        void (::GENAPI_NAMESPACE::Version_1_1::IntRegType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xsde::cxx::ro_string&,
          const ::xsde::cxx::ro_string&,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[4UL];
        unsigned long size;
      };

      protected:
      v_state_ v_state_first_;
      ::xsde::cxx::stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_2 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_1 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_0 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      choice_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      void
      choice_1 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class MaskedIntRegType_pskel: public ::xsde::cxx::parser::validating::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      Streamable ();

      enum choice_arm_tag
      {
        Address_tag,
        IntSwissKnife_tag,
        pAddress_tag,
        pIndex_tag
      };

      virtual void
      choice_arm (choice_arm_tag);

      virtual void
      Address ();

      virtual void
      IntSwissKnife ();

      virtual void
      pAddress ();

      virtual void
      pIndex ();

      virtual void
      Length ();

      virtual void
      AccessMode ();

      virtual void
      pPort ();

      virtual void
      Cachable ();

      virtual void
      PollingTime ();

      virtual void
      pInvalidator ();

      enum choice1_arm_tag
      {
        Bit_tag,
        sequence_tag
      };

      virtual void
      choice1_arm (choice1_arm_tag);

      virtual void
      Bit ();

      virtual void
      LSB ();

      virtual void
      MSB ();

      virtual void
      Sign ();

      virtual void
      Endianess ();

      virtual void
      Unit ();

      virtual void
      Representation ();

      virtual void
      pSelected ();

      virtual void
      post_MaskedIntRegType ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */,
               ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel& /* NameSpace */,
               ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel& /* MergePriority */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel& /* ExposeStatic */,
               ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel& /* Extension */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* ToolTip */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Description */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* DisplayName */,
               ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel& /* Visibility */,
               ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel& /* DocuURL */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* IsDeprecated */,
               ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel& /* EventID */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsImplemented */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsAvailable */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsLocked */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pBlockPolling */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* ImposedAccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pError */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pCastAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* Streamable */,
               ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* Address */,
               ::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel& /* IntSwissKnife */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAddress */,
               ::GENAPI_NAMESPACE::Version_1_1::pIndexType_pskel& /* pIndex */,
               ::GENAPI_NAMESPACE::Version_1_1::PositiveHexOrDecimal_t_pskel& /* Length */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* AccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pPort */,
               ::GENAPI_NAMESPACE::Version_1_1::CachingMode_te_pskel& /* Cachable */,
               ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel& /* PollingTime */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pInvalidator */,
               ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel& /* Bit */,
               ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel& /* LSB */,
               ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel& /* MSB */,
               ::GENAPI_NAMESPACE::Version_1_1::Sign_te_pskel& /* Sign */,
               ::GENAPI_NAMESPACE::Version_1_1::Endianess_te_pskel& /* Endianess */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Unit */,
               ::GENAPI_NAMESPACE::Version_1_1::IntRepresentation_t_pskel& /* Representation */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pSelected */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      NameSpace_parser (::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel&);

      void
      MergePriority_parser (::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel&);

      void
      ExposeStatic_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel&);

      // Individual element parsers.
      //
      void
      Extension_parser (::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel&);

      void
      ToolTip_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Description_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      DisplayName_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Visibility_parser (::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel&);

      void
      DocuURL_parser (::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel&);

      void
      IsDeprecated_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      EventID_parser (::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel&);

      void
      pIsImplemented_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsAvailable_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsLocked_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pBlockPolling_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      ImposedAccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pError_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pCastAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Streamable_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      Address_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      void
      IntSwissKnife_parser (::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel&);

      void
      pAddress_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIndex_parser (::GENAPI_NAMESPACE::Version_1_1::pIndexType_pskel&);

      void
      Length_parser (::GENAPI_NAMESPACE::Version_1_1::PositiveHexOrDecimal_t_pskel&);

      void
      AccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pPort_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Cachable_parser (::GENAPI_NAMESPACE::Version_1_1::CachingMode_te_pskel&);

      void
      PollingTime_parser (::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel&);

      void
      pInvalidator_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Bit_parser (::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel&);

      void
      LSB_parser (::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel&);

      void
      MSB_parser (::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel&);

      void
      Sign_parser (::GENAPI_NAMESPACE::Version_1_1::Sign_te_pskel&);

      void
      Endianess_parser (::GENAPI_NAMESPACE::Version_1_1::Endianess_te_pskel&);

      void
      Unit_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Representation_parser (::GENAPI_NAMESPACE::Version_1_1::IntRepresentation_t_pskel&);

      void
      pSelected_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      MaskedIntRegType_pskel ();

      // Implementation details.
      //
      protected:
      MaskedIntRegType_pskel* MaskedIntRegType_impl_;
      MaskedIntRegType_pskel (MaskedIntRegType_pskel*, void*);

      protected:
      virtual bool
      _start_element_impl (const ::xsde::cxx::ro_string&,
                           const ::xsde::cxx::ro_string&);

      virtual bool
      _end_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel* NameSpace_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel* MergePriority_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel* ExposeStatic_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel* Extension_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* ToolTip_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Description_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* DisplayName_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel* Visibility_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel* DocuURL_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* IsDeprecated_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel* EventID_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsImplemented_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsAvailable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsLocked_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pBlockPolling_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* ImposedAccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pError_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pCastAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* Streamable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* Address_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel* IntSwissKnife_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAddress_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::pIndexType_pskel* pIndex_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::PositiveHexOrDecimal_t_pskel* Length_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* AccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pPort_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CachingMode_te_pskel* Cachable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel* PollingTime_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pInvalidator_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel* Bit_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel* LSB_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel* MSB_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Sign_te_pskel* Sign_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Endianess_te_pskel* Endianess_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Unit_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::IntRepresentation_t_pskel* Representation_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pSelected_parser_;

      public:
      struct v_state_descr_
      {
        void (::GENAPI_NAMESPACE::Version_1_1::MaskedIntRegType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xsde::cxx::ro_string&,
          const ::xsde::cxx::ro_string&,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[4UL];
        unsigned long size;
      };

      protected:
      v_state_ v_state_first_;
      ::xsde::cxx::stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_2 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_0 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      choice_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      void
      choice_1 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      void
      sequence_1 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class StructRegType_pskel: public ::xsde::cxx::parser::validating::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Comment (const ::std::string&);

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      Streamable ();

      enum choice_arm_tag
      {
        Address_tag,
        IntSwissKnife_tag,
        pAddress_tag,
        pIndex_tag
      };

      virtual void
      choice_arm (choice_arm_tag);

      virtual void
      Address ();

      virtual void
      IntSwissKnife ();

      virtual void
      pAddress ();

      virtual void
      pIndex ();

      enum choice1_arm_tag
      {
        Length_tag,
        pLength_tag
      };

      virtual void
      choice1_arm (choice1_arm_tag);

      virtual void
      Length ();

      virtual void
      pLength ();

      virtual void
      AccessMode ();

      virtual void
      pPort ();

      virtual void
      Cachable ();

      virtual void
      PollingTime ();

      virtual void
      pInvalidator ();

      virtual void
      Endianess ();

      virtual void
      StructEntry ();

      virtual void
      post_StructRegType ();

      // Parser construction API.
      //
      void
      parsers (::xml_schema::string_pskel& /* Comment */,
               ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel& /* Extension */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* ToolTip */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Description */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* DisplayName */,
               ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel& /* Visibility */,
               ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel& /* DocuURL */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* IsDeprecated */,
               ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel& /* EventID */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsImplemented */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsAvailable */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsLocked */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pBlockPolling */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* ImposedAccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pError */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pCastAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* Streamable */,
               ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* Address */,
               ::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel& /* IntSwissKnife */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAddress */,
               ::GENAPI_NAMESPACE::Version_1_1::pIndexType_pskel& /* pIndex */,
               ::GENAPI_NAMESPACE::Version_1_1::PositiveHexOrDecimal_t_pskel& /* Length */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pLength */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* AccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pPort */,
               ::GENAPI_NAMESPACE::Version_1_1::CachingMode_te_pskel& /* Cachable */,
               ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel& /* PollingTime */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pInvalidator */,
               ::GENAPI_NAMESPACE::Version_1_1::Endianess_te_pskel& /* Endianess */,
               ::GENAPI_NAMESPACE::Version_1_1::StructEntryType_pskel& /* StructEntry */);

      // Individual attribute parsers.
      //
      void
      Comment_parser (::xml_schema::string_pskel&);

      // Individual element parsers.
      //
      void
      Extension_parser (::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel&);

      void
      ToolTip_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Description_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      DisplayName_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Visibility_parser (::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel&);

      void
      DocuURL_parser (::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel&);

      void
      IsDeprecated_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      EventID_parser (::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel&);

      void
      pIsImplemented_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsAvailable_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsLocked_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pBlockPolling_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      ImposedAccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pError_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pCastAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Streamable_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      Address_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      void
      IntSwissKnife_parser (::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel&);

      void
      pAddress_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIndex_parser (::GENAPI_NAMESPACE::Version_1_1::pIndexType_pskel&);

      void
      Length_parser (::GENAPI_NAMESPACE::Version_1_1::PositiveHexOrDecimal_t_pskel&);

      void
      pLength_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      AccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pPort_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Cachable_parser (::GENAPI_NAMESPACE::Version_1_1::CachingMode_te_pskel&);

      void
      PollingTime_parser (::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel&);

      void
      pInvalidator_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Endianess_parser (::GENAPI_NAMESPACE::Version_1_1::Endianess_te_pskel&);

      void
      StructEntry_parser (::GENAPI_NAMESPACE::Version_1_1::StructEntryType_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      StructRegType_pskel ();

      // Implementation details.
      //
      protected:
      StructRegType_pskel* StructRegType_impl_;
      StructRegType_pskel (StructRegType_pskel*, void*);

      protected:
      virtual bool
      _start_element_impl (const ::xsde::cxx::ro_string&,
                           const ::xsde::cxx::ro_string&);

      virtual bool
      _end_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::xml_schema::string_pskel* Comment_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel* Extension_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* ToolTip_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Description_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* DisplayName_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel* Visibility_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel* DocuURL_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* IsDeprecated_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel* EventID_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsImplemented_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsAvailable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsLocked_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pBlockPolling_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* ImposedAccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pError_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pCastAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* Streamable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* Address_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel* IntSwissKnife_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAddress_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::pIndexType_pskel* pIndex_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::PositiveHexOrDecimal_t_pskel* Length_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pLength_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* AccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pPort_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CachingMode_te_pskel* Cachable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel* PollingTime_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pInvalidator_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Endianess_te_pskel* Endianess_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::StructEntryType_pskel* StructEntry_parser_;

      public:
      struct v_state_descr_
      {
        void (::GENAPI_NAMESPACE::Version_1_1::StructRegType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xsde::cxx::ro_string&,
          const ::xsde::cxx::ro_string&,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[4UL];
        unsigned long size;
      };

      protected:
      v_state_ v_state_first_;
      ::xsde::cxx::stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_2 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_1 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_0 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      choice_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      void
      choice_1 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      protected:
      struct v_state_attr_
      {
        bool Comment;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class StructEntryType_pskel: public ::xsde::cxx::parser::validating::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      AccessMode ();

      virtual void
      Cachable ();

      virtual void
      PollingTime ();

      virtual void
      Streamable ();

      enum choice_arm_tag
      {
        Bit_tag,
        sequence_tag
      };

      virtual void
      choice_arm (choice_arm_tag);

      virtual void
      Bit ();

      virtual void
      LSB ();

      virtual void
      MSB ();

      virtual void
      Sign ();

      virtual void
      Unit ();

      virtual void
      Representation ();

      virtual void
      pSelected ();

      virtual void
      post_StructEntryType ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */,
               ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel& /* NameSpace */,
               ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel& /* MergePriority */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel& /* ExposeStatic */,
               ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel& /* Extension */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* ToolTip */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Description */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* DisplayName */,
               ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel& /* Visibility */,
               ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel& /* DocuURL */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* IsDeprecated */,
               ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel& /* EventID */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsImplemented */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsAvailable */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsLocked */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pBlockPolling */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* ImposedAccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pError */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pCastAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pInvalidator */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* AccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CachingMode_te_pskel& /* Cachable */,
               ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel& /* PollingTime */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* Streamable */,
               ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel& /* Bit */,
               ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel& /* LSB */,
               ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel& /* MSB */,
               ::GENAPI_NAMESPACE::Version_1_1::Sign_te_pskel& /* Sign */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Unit */,
               ::GENAPI_NAMESPACE::Version_1_1::IntRepresentation_t_pskel& /* Representation */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pSelected */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      NameSpace_parser (::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel&);

      void
      MergePriority_parser (::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel&);

      void
      ExposeStatic_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel&);

      // Individual element parsers.
      //
      void
      Extension_parser (::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel&);

      void
      ToolTip_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Description_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      DisplayName_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Visibility_parser (::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel&);

      void
      DocuURL_parser (::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel&);

      void
      IsDeprecated_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      EventID_parser (::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel&);

      void
      pIsImplemented_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsAvailable_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsLocked_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pBlockPolling_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      ImposedAccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pError_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pCastAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pInvalidator_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      AccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      Cachable_parser (::GENAPI_NAMESPACE::Version_1_1::CachingMode_te_pskel&);

      void
      PollingTime_parser (::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel&);

      void
      Streamable_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      Bit_parser (::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel&);

      void
      LSB_parser (::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel&);

      void
      MSB_parser (::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel&);

      void
      Sign_parser (::GENAPI_NAMESPACE::Version_1_1::Sign_te_pskel&);

      void
      Unit_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Representation_parser (::GENAPI_NAMESPACE::Version_1_1::IntRepresentation_t_pskel&);

      void
      pSelected_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      StructEntryType_pskel ();

      // Implementation details.
      //
      protected:
      StructEntryType_pskel* StructEntryType_impl_;
      StructEntryType_pskel (StructEntryType_pskel*, void*);

      protected:
      virtual bool
      _start_element_impl (const ::xsde::cxx::ro_string&,
                           const ::xsde::cxx::ro_string&);

      virtual bool
      _end_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel* NameSpace_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel* MergePriority_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel* ExposeStatic_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel* Extension_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* ToolTip_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Description_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* DisplayName_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel* Visibility_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel* DocuURL_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* IsDeprecated_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel* EventID_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsImplemented_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsAvailable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsLocked_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pBlockPolling_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* ImposedAccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pError_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pCastAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pInvalidator_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* AccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CachingMode_te_pskel* Cachable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel* PollingTime_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* Streamable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel* Bit_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel* LSB_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel* MSB_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Sign_te_pskel* Sign_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Unit_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::IntRepresentation_t_pskel* Representation_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pSelected_parser_;

      public:
      struct v_state_descr_
      {
        void (::GENAPI_NAMESPACE::Version_1_1::StructEntryType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xsde::cxx::ro_string&,
          const ::xsde::cxx::ro_string&,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[4UL];
        unsigned long size;
      };

      protected:
      v_state_ v_state_first_;
      ::xsde::cxx::stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_1 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      choice_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      void
      sequence_0 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class CommandType_pskel: public ::xsde::cxx::parser::validating::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      enum choice_arm_tag
      {
        Value_tag,
        pValue_tag
      };

      virtual void
      choice_arm (choice_arm_tag);

      virtual void
      Value ();

      virtual void
      pValue ();

      enum choice1_arm_tag
      {
        CommandValue_tag,
        pCommandValue_tag
      };

      virtual void
      choice1_arm (choice1_arm_tag);

      virtual void
      CommandValue ();

      virtual void
      pCommandValue ();

      virtual void
      PollingTime ();

      virtual void
      post_CommandType ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */,
               ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel& /* NameSpace */,
               ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel& /* MergePriority */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel& /* ExposeStatic */,
               ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel& /* Extension */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* ToolTip */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Description */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* DisplayName */,
               ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel& /* Visibility */,
               ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel& /* DocuURL */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* IsDeprecated */,
               ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel& /* EventID */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsImplemented */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsAvailable */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsLocked */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pBlockPolling */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* ImposedAccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pError */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pCastAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pInvalidator */,
               ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* Value */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pValue */,
               ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* CommandValue */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pCommandValue */,
               ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel& /* PollingTime */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      NameSpace_parser (::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel&);

      void
      MergePriority_parser (::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel&);

      void
      ExposeStatic_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel&);

      // Individual element parsers.
      //
      void
      Extension_parser (::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel&);

      void
      ToolTip_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Description_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      DisplayName_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Visibility_parser (::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel&);

      void
      DocuURL_parser (::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel&);

      void
      IsDeprecated_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      EventID_parser (::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel&);

      void
      pIsImplemented_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsAvailable_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsLocked_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pBlockPolling_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      ImposedAccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pError_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pCastAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pInvalidator_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Value_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      void
      pValue_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      CommandValue_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      void
      pCommandValue_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      PollingTime_parser (::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      CommandType_pskel ();

      // Implementation details.
      //
      protected:
      CommandType_pskel* CommandType_impl_;
      CommandType_pskel (CommandType_pskel*, void*);

      protected:
      virtual bool
      _start_element_impl (const ::xsde::cxx::ro_string&,
                           const ::xsde::cxx::ro_string&);

      virtual bool
      _end_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel* NameSpace_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel* MergePriority_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel* ExposeStatic_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel* Extension_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* ToolTip_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Description_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* DisplayName_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel* Visibility_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel* DocuURL_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* IsDeprecated_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel* EventID_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsImplemented_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsAvailable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsLocked_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pBlockPolling_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* ImposedAccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pError_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pCastAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pInvalidator_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* Value_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pValue_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* CommandValue_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pCommandValue_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel* PollingTime_parser_;

      public:
      struct v_state_descr_
      {
        void (::GENAPI_NAMESPACE::Version_1_1::CommandType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xsde::cxx::ro_string&,
          const ::xsde::cxx::ro_string&,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[3UL];
        unsigned long size;
      };

      protected:
      v_state_ v_state_first_;
      ::xsde::cxx::stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_1 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_0 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      choice_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      void
      choice_1 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class BooleanType_pskel: public ::xsde::cxx::parser::validating::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      Streamable ();

      enum choice_arm_tag
      {
        Value_tag,
        pValue_tag
      };

      virtual void
      choice_arm (choice_arm_tag);

      virtual void
      Value (bool);

      virtual void
      pValue ();

      virtual void
      OnValue ();

      virtual void
      OffValue ();

      virtual void
      pSelected ();

      virtual void
      post_BooleanType ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */,
               ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel& /* NameSpace */,
               ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel& /* MergePriority */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel& /* ExposeStatic */,
               ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel& /* Extension */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* ToolTip */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Description */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* DisplayName */,
               ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel& /* Visibility */,
               ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel& /* DocuURL */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* IsDeprecated */,
               ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel& /* EventID */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsImplemented */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsAvailable */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsLocked */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pBlockPolling */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* ImposedAccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pError */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pCastAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pInvalidator */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* Streamable */,
               ::xml_schema::boolean_pskel& /* Value */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pValue */,
               ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* OnValue */,
               ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* OffValue */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pSelected */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      NameSpace_parser (::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel&);

      void
      MergePriority_parser (::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel&);

      void
      ExposeStatic_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel&);

      // Individual element parsers.
      //
      void
      Extension_parser (::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel&);

      void
      ToolTip_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Description_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      DisplayName_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Visibility_parser (::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel&);

      void
      DocuURL_parser (::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel&);

      void
      IsDeprecated_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      EventID_parser (::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel&);

      void
      pIsImplemented_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsAvailable_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsLocked_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pBlockPolling_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      ImposedAccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pError_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pCastAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pInvalidator_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Streamable_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      Value_parser (::xml_schema::boolean_pskel&);

      void
      pValue_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      OnValue_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      void
      OffValue_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      void
      pSelected_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      BooleanType_pskel ();

      // Implementation details.
      //
      protected:
      BooleanType_pskel* BooleanType_impl_;
      BooleanType_pskel (BooleanType_pskel*, void*);

      protected:
      virtual bool
      _start_element_impl (const ::xsde::cxx::ro_string&,
                           const ::xsde::cxx::ro_string&);

      virtual bool
      _end_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel* NameSpace_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel* MergePriority_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel* ExposeStatic_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel* Extension_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* ToolTip_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Description_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* DisplayName_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel* Visibility_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel* DocuURL_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* IsDeprecated_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel* EventID_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsImplemented_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsAvailable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsLocked_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pBlockPolling_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* ImposedAccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pError_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pCastAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pInvalidator_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* Streamable_parser_;
      ::xml_schema::boolean_pskel* Value_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pValue_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* OnValue_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* OffValue_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pSelected_parser_;

      public:
      struct v_state_descr_
      {
        void (::GENAPI_NAMESPACE::Version_1_1::BooleanType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xsde::cxx::ro_string&,
          const ::xsde::cxx::ro_string&,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[3UL];
        unsigned long size;
      };

      protected:
      v_state_ v_state_first_;
      ::xsde::cxx::stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_1 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_0 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      choice_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class FloatType_pskel: public ::xsde::cxx::parser::validating::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      Streamable ();

      enum choice_arm_tag
      {
        Value_tag,
        pValue_tag,
        sequence_tag
      };

      virtual void
      choice_arm (choice_arm_tag);

      virtual void
      Value (double);

      virtual void
      pValue ();

      virtual void
      pIndex ();

      enum choice1_arm_tag
      {
        ValueIndexed_tag,
        pValueIndexed_tag
      };

      virtual void
      choice1_arm (choice1_arm_tag);

      virtual void
      ValueIndexed ();

      virtual void
      pValueIndexed ();

      enum choice2_arm_tag
      {
        ValueDefault_tag,
        pValueDefault_tag
      };

      virtual void
      choice2_arm (choice2_arm_tag);

      virtual void
      ValueDefault (double);

      virtual void
      pValueDefault ();

      enum choice3_arm_tag
      {
        Min_tag,
        pMin_tag
      };

      virtual void
      choice3_arm (choice3_arm_tag);

      virtual void
      Min (double);

      virtual void
      pMin ();

      enum choice4_arm_tag
      {
        Max_tag,
        pMax_tag
      };

      virtual void
      choice4_arm (choice4_arm_tag);

      virtual void
      Max (double);

      virtual void
      pMax ();

      enum choice5_arm_tag
      {
        Inc_tag,
        pInc_tag
      };

      virtual void
      choice5_arm (choice5_arm_tag);

      virtual void
      Inc (double);

      virtual void
      pInc ();

      virtual void
      Unit ();

      virtual void
      Representation ();

      virtual void
      DisplayNotation ();

      virtual void
      DisplayPrecision ();

      virtual void
      post_FloatType ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */,
               ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel& /* NameSpace */,
               ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel& /* MergePriority */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel& /* ExposeStatic */,
               ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel& /* Extension */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* ToolTip */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Description */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* DisplayName */,
               ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel& /* Visibility */,
               ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel& /* DocuURL */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* IsDeprecated */,
               ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel& /* EventID */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsImplemented */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsAvailable */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsLocked */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pBlockPolling */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* ImposedAccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pError */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pCastAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pInvalidator */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* Streamable */,
               ::xml_schema::double_pskel& /* Value */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pValue */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIndex */,
               ::GENAPI_NAMESPACE::Version_1_1::ValueIndexed1_pskel& /* ValueIndexed */,
               ::GENAPI_NAMESPACE::Version_1_1::pValueIndexed1_pskel& /* pValueIndexed */,
               ::xml_schema::double_pskel& /* ValueDefault */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pValueDefault */,
               ::xml_schema::double_pskel& /* Min */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pMin */,
               ::xml_schema::double_pskel& /* Max */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pMax */,
               ::xml_schema::double_pskel& /* Inc */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pInc */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Unit */,
               ::GENAPI_NAMESPACE::Version_1_1::FloatRepresentation_t_pskel& /* Representation */,
               ::GENAPI_NAMESPACE::Version_1_1::DisplayNotation_t_pskel& /* DisplayNotation */,
               ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* DisplayPrecision */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      NameSpace_parser (::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel&);

      void
      MergePriority_parser (::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel&);

      void
      ExposeStatic_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel&);

      // Individual element parsers.
      //
      void
      Extension_parser (::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel&);

      void
      ToolTip_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Description_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      DisplayName_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Visibility_parser (::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel&);

      void
      DocuURL_parser (::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel&);

      void
      IsDeprecated_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      EventID_parser (::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel&);

      void
      pIsImplemented_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsAvailable_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsLocked_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pBlockPolling_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      ImposedAccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pError_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pCastAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pInvalidator_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Streamable_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      Value_parser (::xml_schema::double_pskel&);

      void
      pValue_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIndex_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      ValueIndexed_parser (::GENAPI_NAMESPACE::Version_1_1::ValueIndexed1_pskel&);

      void
      pValueIndexed_parser (::GENAPI_NAMESPACE::Version_1_1::pValueIndexed1_pskel&);

      void
      ValueDefault_parser (::xml_schema::double_pskel&);

      void
      pValueDefault_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Min_parser (::xml_schema::double_pskel&);

      void
      pMin_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Max_parser (::xml_schema::double_pskel&);

      void
      pMax_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Inc_parser (::xml_schema::double_pskel&);

      void
      pInc_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Unit_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Representation_parser (::GENAPI_NAMESPACE::Version_1_1::FloatRepresentation_t_pskel&);

      void
      DisplayNotation_parser (::GENAPI_NAMESPACE::Version_1_1::DisplayNotation_t_pskel&);

      void
      DisplayPrecision_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      FloatType_pskel ();

      // Implementation details.
      //
      protected:
      FloatType_pskel* FloatType_impl_;
      FloatType_pskel (FloatType_pskel*, void*);

      protected:
      virtual bool
      _start_element_impl (const ::xsde::cxx::ro_string&,
                           const ::xsde::cxx::ro_string&);

      virtual bool
      _end_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel* NameSpace_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel* MergePriority_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel* ExposeStatic_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel* Extension_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* ToolTip_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Description_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* DisplayName_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel* Visibility_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel* DocuURL_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* IsDeprecated_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel* EventID_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsImplemented_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsAvailable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsLocked_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pBlockPolling_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* ImposedAccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pError_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pCastAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pInvalidator_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* Streamable_parser_;
      ::xml_schema::double_pskel* Value_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pValue_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIndex_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::ValueIndexed1_pskel* ValueIndexed_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::pValueIndexed1_pskel* pValueIndexed_parser_;
      ::xml_schema::double_pskel* ValueDefault_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pValueDefault_parser_;
      ::xml_schema::double_pskel* Min_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pMin_parser_;
      ::xml_schema::double_pskel* Max_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pMax_parser_;
      ::xml_schema::double_pskel* Inc_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pInc_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Unit_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::FloatRepresentation_t_pskel* Representation_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::DisplayNotation_t_pskel* DisplayNotation_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* DisplayPrecision_parser_;

      public:
      struct v_state_descr_
      {
        void (::GENAPI_NAMESPACE::Version_1_1::FloatType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xsde::cxx::ro_string&,
          const ::xsde::cxx::ro_string&,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[5UL];
        unsigned long size;
      };

      protected:
      v_state_ v_state_first_;
      ::xsde::cxx::stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_2 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_0 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      choice_2 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      void
      sequence_1 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      choice_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      void
      choice_1 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      void
      choice_3 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      void
      choice_4 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      void
      choice_5 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class ConverterType_pskel: public ::xsde::cxx::parser::validating::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      Streamable ();

      virtual void
      pVariable ();

      virtual void
      Constant ();

      virtual void
      Expression ();

      virtual void
      FormulaTo (const ::std::string&);

      virtual void
      FormulaFrom (const ::std::string&);

      virtual void
      pValue ();

      virtual void
      Unit ();

      virtual void
      Representation ();

      virtual void
      DisplayNotation ();

      virtual void
      DisplayPrecision ();

      virtual void
      Slope ();

      virtual void
      IsLinear ();

      virtual void
      post_ConverterType ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */,
               ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel& /* NameSpace */,
               ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel& /* MergePriority */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel& /* ExposeStatic */,
               ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel& /* Extension */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* ToolTip */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Description */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* DisplayName */,
               ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel& /* Visibility */,
               ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel& /* DocuURL */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* IsDeprecated */,
               ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel& /* EventID */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsImplemented */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsAvailable */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsLocked */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pBlockPolling */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* ImposedAccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pError */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pCastAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pInvalidator */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* Streamable */,
               ::GENAPI_NAMESPACE::Version_1_1::pVariable_pskel& /* pVariable */,
               ::GENAPI_NAMESPACE::Version_1_1::Constant_pskel& /* Constant */,
               ::GENAPI_NAMESPACE::Version_1_1::Expression_pskel& /* Expression */,
               ::xml_schema::string_pskel& /* FormulaTo */,
               ::xml_schema::string_pskel& /* FormulaFrom */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pValue */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Unit */,
               ::GENAPI_NAMESPACE::Version_1_1::FloatRepresentation_t_pskel& /* Representation */,
               ::GENAPI_NAMESPACE::Version_1_1::DisplayNotation_t_pskel& /* DisplayNotation */,
               ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* DisplayPrecision */,
               ::GENAPI_NAMESPACE::Version_1_1::Slope_te_pskel& /* Slope */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* IsLinear */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      NameSpace_parser (::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel&);

      void
      MergePriority_parser (::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel&);

      void
      ExposeStatic_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel&);

      // Individual element parsers.
      //
      void
      Extension_parser (::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel&);

      void
      ToolTip_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Description_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      DisplayName_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Visibility_parser (::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel&);

      void
      DocuURL_parser (::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel&);

      void
      IsDeprecated_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      EventID_parser (::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel&);

      void
      pIsImplemented_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsAvailable_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsLocked_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pBlockPolling_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      ImposedAccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pError_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pCastAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pInvalidator_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Streamable_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      pVariable_parser (::GENAPI_NAMESPACE::Version_1_1::pVariable_pskel&);

      void
      Constant_parser (::GENAPI_NAMESPACE::Version_1_1::Constant_pskel&);

      void
      Expression_parser (::GENAPI_NAMESPACE::Version_1_1::Expression_pskel&);

      void
      FormulaTo_parser (::xml_schema::string_pskel&);

      void
      FormulaFrom_parser (::xml_schema::string_pskel&);

      void
      pValue_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Unit_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Representation_parser (::GENAPI_NAMESPACE::Version_1_1::FloatRepresentation_t_pskel&);

      void
      DisplayNotation_parser (::GENAPI_NAMESPACE::Version_1_1::DisplayNotation_t_pskel&);

      void
      DisplayPrecision_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      void
      Slope_parser (::GENAPI_NAMESPACE::Version_1_1::Slope_te_pskel&);

      void
      IsLinear_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      ConverterType_pskel ();

      // Implementation details.
      //
      protected:
      ConverterType_pskel* ConverterType_impl_;
      ConverterType_pskel (ConverterType_pskel*, void*);

      protected:
      virtual bool
      _start_element_impl (const ::xsde::cxx::ro_string&,
                           const ::xsde::cxx::ro_string&);

      virtual bool
      _end_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel* NameSpace_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel* MergePriority_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel* ExposeStatic_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel* Extension_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* ToolTip_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Description_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* DisplayName_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel* Visibility_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel* DocuURL_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* IsDeprecated_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel* EventID_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsImplemented_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsAvailable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsLocked_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pBlockPolling_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* ImposedAccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pError_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pCastAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pInvalidator_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* Streamable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::pVariable_pskel* pVariable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Constant_pskel* Constant_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Expression_pskel* Expression_parser_;
      ::xml_schema::string_pskel* FormulaTo_parser_;
      ::xml_schema::string_pskel* FormulaFrom_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pValue_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Unit_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::FloatRepresentation_t_pskel* Representation_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::DisplayNotation_t_pskel* DisplayNotation_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* DisplayPrecision_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Slope_te_pskel* Slope_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* IsLinear_parser_;

      public:
      struct v_state_descr_
      {
        void (::GENAPI_NAMESPACE::Version_1_1::ConverterType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xsde::cxx::ro_string&,
          const ::xsde::cxx::ro_string&,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[3UL];
        unsigned long size;
      };

      protected:
      v_state_ v_state_first_;
      ::xsde::cxx::stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_2 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_0 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_1 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class IntConverterType_pskel: public ::xsde::cxx::parser::validating::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      Streamable ();

      virtual void
      pVariable ();

      virtual void
      Constant ();

      virtual void
      Expression ();

      virtual void
      FormulaTo (const ::std::string&);

      virtual void
      FormulaFrom (const ::std::string&);

      enum choice_arm_tag
      {
        pValue_tag
      };

      virtual void
      choice_arm (choice_arm_tag);

      virtual void
      pValue ();

      virtual void
      Unit ();

      virtual void
      Representation ();

      virtual void
      Slope ();

      virtual void
      post_IntConverterType ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */,
               ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel& /* NameSpace */,
               ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel& /* MergePriority */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel& /* ExposeStatic */,
               ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel& /* Extension */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* ToolTip */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Description */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* DisplayName */,
               ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel& /* Visibility */,
               ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel& /* DocuURL */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* IsDeprecated */,
               ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel& /* EventID */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsImplemented */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsAvailable */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsLocked */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pBlockPolling */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* ImposedAccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pError */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pCastAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pInvalidator */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* Streamable */,
               ::GENAPI_NAMESPACE::Version_1_1::pVariable1_pskel& /* pVariable */,
               ::GENAPI_NAMESPACE::Version_1_1::Constant1_pskel& /* Constant */,
               ::GENAPI_NAMESPACE::Version_1_1::Expression1_pskel& /* Expression */,
               ::xml_schema::string_pskel& /* FormulaTo */,
               ::xml_schema::string_pskel& /* FormulaFrom */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pValue */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Unit */,
               ::GENAPI_NAMESPACE::Version_1_1::IntRepresentation_t_pskel& /* Representation */,
               ::GENAPI_NAMESPACE::Version_1_1::Slope_te_pskel& /* Slope */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      NameSpace_parser (::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel&);

      void
      MergePriority_parser (::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel&);

      void
      ExposeStatic_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel&);

      // Individual element parsers.
      //
      void
      Extension_parser (::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel&);

      void
      ToolTip_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Description_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      DisplayName_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Visibility_parser (::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel&);

      void
      DocuURL_parser (::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel&);

      void
      IsDeprecated_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      EventID_parser (::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel&);

      void
      pIsImplemented_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsAvailable_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsLocked_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pBlockPolling_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      ImposedAccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pError_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pCastAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pInvalidator_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Streamable_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      pVariable_parser (::GENAPI_NAMESPACE::Version_1_1::pVariable1_pskel&);

      void
      Constant_parser (::GENAPI_NAMESPACE::Version_1_1::Constant1_pskel&);

      void
      Expression_parser (::GENAPI_NAMESPACE::Version_1_1::Expression1_pskel&);

      void
      FormulaTo_parser (::xml_schema::string_pskel&);

      void
      FormulaFrom_parser (::xml_schema::string_pskel&);

      void
      pValue_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Unit_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Representation_parser (::GENAPI_NAMESPACE::Version_1_1::IntRepresentation_t_pskel&);

      void
      Slope_parser (::GENAPI_NAMESPACE::Version_1_1::Slope_te_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      IntConverterType_pskel ();

      // Implementation details.
      //
      protected:
      IntConverterType_pskel* IntConverterType_impl_;
      IntConverterType_pskel (IntConverterType_pskel*, void*);

      protected:
      virtual bool
      _start_element_impl (const ::xsde::cxx::ro_string&,
                           const ::xsde::cxx::ro_string&);

      virtual bool
      _end_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel* NameSpace_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel* MergePriority_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel* ExposeStatic_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel* Extension_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* ToolTip_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Description_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* DisplayName_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel* Visibility_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel* DocuURL_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* IsDeprecated_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel* EventID_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsImplemented_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsAvailable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsLocked_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pBlockPolling_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* ImposedAccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pError_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pCastAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pInvalidator_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* Streamable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::pVariable1_pskel* pVariable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Constant1_pskel* Constant_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Expression1_pskel* Expression_parser_;
      ::xml_schema::string_pskel* FormulaTo_parser_;
      ::xml_schema::string_pskel* FormulaFrom_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pValue_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Unit_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::IntRepresentation_t_pskel* Representation_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Slope_te_pskel* Slope_parser_;

      public:
      struct v_state_descr_
      {
        void (::GENAPI_NAMESPACE::Version_1_1::IntConverterType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xsde::cxx::ro_string&,
          const ::xsde::cxx::ro_string&,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[3UL];
        unsigned long size;
      };

      protected:
      v_state_ v_state_first_;
      ::xsde::cxx::stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_2 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_0 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_1 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      choice_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class FloatRegType_pskel: public ::xsde::cxx::parser::validating::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      Streamable ();

      enum choice_arm_tag
      {
        Address_tag,
        IntSwissKnife_tag,
        pAddress_tag,
        pIndex_tag
      };

      virtual void
      choice_arm (choice_arm_tag);

      virtual void
      Address ();

      virtual void
      IntSwissKnife ();

      virtual void
      pAddress ();

      virtual void
      pIndex ();

      enum choice1_arm_tag
      {
        Length_tag,
        pLength_tag
      };

      virtual void
      choice1_arm (choice1_arm_tag);

      virtual void
      Length ();

      virtual void
      pLength ();

      virtual void
      AccessMode ();

      virtual void
      pPort ();

      virtual void
      Cachable ();

      virtual void
      PollingTime ();

      virtual void
      pInvalidator ();

      virtual void
      Endianess ();

      virtual void
      Unit ();

      virtual void
      Representation ();

      virtual void
      DisplayNotation ();

      virtual void
      DisplayPrecision ();

      virtual void
      post_FloatRegType ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */,
               ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel& /* NameSpace */,
               ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel& /* MergePriority */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel& /* ExposeStatic */,
               ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel& /* Extension */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* ToolTip */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Description */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* DisplayName */,
               ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel& /* Visibility */,
               ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel& /* DocuURL */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* IsDeprecated */,
               ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel& /* EventID */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsImplemented */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsAvailable */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsLocked */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pBlockPolling */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* ImposedAccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pError */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pCastAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* Streamable */,
               ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* Address */,
               ::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel& /* IntSwissKnife */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAddress */,
               ::GENAPI_NAMESPACE::Version_1_1::pIndexType_pskel& /* pIndex */,
               ::GENAPI_NAMESPACE::Version_1_1::PositiveHexOrDecimal_t_pskel& /* Length */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pLength */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* AccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pPort */,
               ::GENAPI_NAMESPACE::Version_1_1::CachingMode_te_pskel& /* Cachable */,
               ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel& /* PollingTime */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pInvalidator */,
               ::GENAPI_NAMESPACE::Version_1_1::Endianess_te_pskel& /* Endianess */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Unit */,
               ::GENAPI_NAMESPACE::Version_1_1::FloatRepresentation_t_pskel& /* Representation */,
               ::GENAPI_NAMESPACE::Version_1_1::DisplayNotation_t_pskel& /* DisplayNotation */,
               ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* DisplayPrecision */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      NameSpace_parser (::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel&);

      void
      MergePriority_parser (::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel&);

      void
      ExposeStatic_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel&);

      // Individual element parsers.
      //
      void
      Extension_parser (::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel&);

      void
      ToolTip_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Description_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      DisplayName_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Visibility_parser (::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel&);

      void
      DocuURL_parser (::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel&);

      void
      IsDeprecated_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      EventID_parser (::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel&);

      void
      pIsImplemented_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsAvailable_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsLocked_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pBlockPolling_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      ImposedAccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pError_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pCastAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Streamable_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      Address_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      void
      IntSwissKnife_parser (::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel&);

      void
      pAddress_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIndex_parser (::GENAPI_NAMESPACE::Version_1_1::pIndexType_pskel&);

      void
      Length_parser (::GENAPI_NAMESPACE::Version_1_1::PositiveHexOrDecimal_t_pskel&);

      void
      pLength_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      AccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pPort_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Cachable_parser (::GENAPI_NAMESPACE::Version_1_1::CachingMode_te_pskel&);

      void
      PollingTime_parser (::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel&);

      void
      pInvalidator_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Endianess_parser (::GENAPI_NAMESPACE::Version_1_1::Endianess_te_pskel&);

      void
      Unit_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Representation_parser (::GENAPI_NAMESPACE::Version_1_1::FloatRepresentation_t_pskel&);

      void
      DisplayNotation_parser (::GENAPI_NAMESPACE::Version_1_1::DisplayNotation_t_pskel&);

      void
      DisplayPrecision_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      FloatRegType_pskel ();

      // Implementation details.
      //
      protected:
      FloatRegType_pskel* FloatRegType_impl_;
      FloatRegType_pskel (FloatRegType_pskel*, void*);

      protected:
      virtual bool
      _start_element_impl (const ::xsde::cxx::ro_string&,
                           const ::xsde::cxx::ro_string&);

      virtual bool
      _end_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel* NameSpace_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel* MergePriority_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel* ExposeStatic_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel* Extension_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* ToolTip_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Description_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* DisplayName_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel* Visibility_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel* DocuURL_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* IsDeprecated_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel* EventID_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsImplemented_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsAvailable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsLocked_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pBlockPolling_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* ImposedAccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pError_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pCastAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* Streamable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* Address_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel* IntSwissKnife_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAddress_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::pIndexType_pskel* pIndex_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::PositiveHexOrDecimal_t_pskel* Length_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pLength_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* AccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pPort_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CachingMode_te_pskel* Cachable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel* PollingTime_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pInvalidator_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Endianess_te_pskel* Endianess_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Unit_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::FloatRepresentation_t_pskel* Representation_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::DisplayNotation_t_pskel* DisplayNotation_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* DisplayPrecision_parser_;

      public:
      struct v_state_descr_
      {
        void (::GENAPI_NAMESPACE::Version_1_1::FloatRegType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xsde::cxx::ro_string&,
          const ::xsde::cxx::ro_string&,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[4UL];
        unsigned long size;
      };

      protected:
      v_state_ v_state_first_;
      ::xsde::cxx::stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_2 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_1 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_0 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      choice_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      void
      choice_1 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class EnumerationType_pskel: public ::xsde::cxx::parser::validating::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      Streamable ();

      virtual void
      EnumEntry ();

      enum choice_arm_tag
      {
        Value_tag,
        pValue_tag
      };

      virtual void
      choice_arm (choice_arm_tag);

      virtual void
      Value ();

      virtual void
      pValue ();

      virtual void
      pSelected ();

      virtual void
      PollingTime ();

      virtual void
      post_EnumerationType ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */,
               ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel& /* NameSpace */,
               ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel& /* MergePriority */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel& /* ExposeStatic */,
               ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel& /* Extension */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* ToolTip */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Description */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* DisplayName */,
               ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel& /* Visibility */,
               ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel& /* DocuURL */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* IsDeprecated */,
               ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel& /* EventID */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsImplemented */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsAvailable */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsLocked */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pBlockPolling */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* ImposedAccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pError */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pCastAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pInvalidator */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* Streamable */,
               ::GENAPI_NAMESPACE::Version_1_1::EnumEntryType_pskel& /* EnumEntry */,
               ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* Value */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pValue */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pSelected */,
               ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel& /* PollingTime */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      NameSpace_parser (::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel&);

      void
      MergePriority_parser (::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel&);

      void
      ExposeStatic_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel&);

      // Individual element parsers.
      //
      void
      Extension_parser (::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel&);

      void
      ToolTip_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Description_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      DisplayName_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Visibility_parser (::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel&);

      void
      DocuURL_parser (::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel&);

      void
      IsDeprecated_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      EventID_parser (::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel&);

      void
      pIsImplemented_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsAvailable_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsLocked_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pBlockPolling_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      ImposedAccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pError_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pCastAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pInvalidator_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Streamable_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      EnumEntry_parser (::GENAPI_NAMESPACE::Version_1_1::EnumEntryType_pskel&);

      void
      Value_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      void
      pValue_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pSelected_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      PollingTime_parser (::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      EnumerationType_pskel ();

      // Implementation details.
      //
      protected:
      EnumerationType_pskel* EnumerationType_impl_;
      EnumerationType_pskel (EnumerationType_pskel*, void*);

      protected:
      virtual bool
      _start_element_impl (const ::xsde::cxx::ro_string&,
                           const ::xsde::cxx::ro_string&);

      virtual bool
      _end_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel* NameSpace_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel* MergePriority_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel* ExposeStatic_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel* Extension_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* ToolTip_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Description_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* DisplayName_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel* Visibility_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel* DocuURL_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* IsDeprecated_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel* EventID_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsImplemented_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsAvailable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsLocked_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pBlockPolling_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* ImposedAccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pError_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pCastAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pInvalidator_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* Streamable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::EnumEntryType_pskel* EnumEntry_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* Value_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pValue_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pSelected_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel* PollingTime_parser_;

      public:
      struct v_state_descr_
      {
        void (::GENAPI_NAMESPACE::Version_1_1::EnumerationType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xsde::cxx::ro_string&,
          const ::xsde::cxx::ro_string&,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[3UL];
        unsigned long size;
      };

      protected:
      v_state_ v_state_first_;
      ::xsde::cxx::stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_1 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_0 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

	  void
      choice_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

	  protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class EnumEntryType_pskel: public ::xsde::cxx::parser::validating::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      Value ();

      virtual void
      NumericValue (double);

      virtual void
      Symbolic ();

      virtual void
      IsSelfClearing ();

      virtual void
      post_EnumEntryType ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */,
               ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel& /* NameSpace */,
               ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel& /* MergePriority */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel& /* ExposeStatic */,
               ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel& /* Extension */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* ToolTip */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Description */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* DisplayName */,
               ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel& /* Visibility */,
               ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel& /* DocuURL */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* IsDeprecated */,
               ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel& /* EventID */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsImplemented */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsAvailable */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsLocked */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pBlockPolling */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* ImposedAccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pError */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pCastAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pInvalidator */,
               ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* Value */,
               ::xml_schema::double_pskel& /* NumericValue */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Symbolic */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* IsSelfClearing */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      NameSpace_parser (::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel&);

      void
      MergePriority_parser (::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel&);

      void
      ExposeStatic_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel&);

      // Individual element parsers.
      //
      void
      Extension_parser (::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel&);

      void
      ToolTip_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Description_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      DisplayName_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Visibility_parser (::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel&);

      void
      DocuURL_parser (::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel&);

      void
      IsDeprecated_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      EventID_parser (::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel&);

      void
      pIsImplemented_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsAvailable_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsLocked_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pBlockPolling_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      ImposedAccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pError_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pCastAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pInvalidator_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Value_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      void
      NumericValue_parser (::xml_schema::double_pskel&);

      void
      Symbolic_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      IsSelfClearing_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      EnumEntryType_pskel ();

      // Implementation details.
      //
      protected:
      EnumEntryType_pskel* EnumEntryType_impl_;
      EnumEntryType_pskel (EnumEntryType_pskel*, void*);

      protected:
      virtual bool
      _start_element_impl (const ::xsde::cxx::ro_string&,
                           const ::xsde::cxx::ro_string&);

      virtual bool
      _end_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel* NameSpace_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel* MergePriority_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel* ExposeStatic_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel* Extension_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* ToolTip_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Description_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* DisplayName_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel* Visibility_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel* DocuURL_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* IsDeprecated_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel* EventID_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsImplemented_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsAvailable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsLocked_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pBlockPolling_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* ImposedAccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pError_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pCastAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pInvalidator_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* Value_parser_;
      ::xml_schema::double_pskel* NumericValue_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Symbolic_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* IsSelfClearing_parser_;

      public:
      struct v_state_descr_
      {
        void (::GENAPI_NAMESPACE::Version_1_1::EnumEntryType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xsde::cxx::ro_string&,
          const ::xsde::cxx::ro_string&,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[3UL];
        unsigned long size;
      };

      protected:
      v_state_ v_state_first_;
      ::xsde::cxx::stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_1 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_0 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class StringType_pskel: public ::xsde::cxx::parser::validating::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      Streamable ();

      enum choice_arm_tag
      {
        Value_tag,
        pValue_tag
      };

      virtual void
      choice_arm (choice_arm_tag);

      virtual void
      Value (const ::std::string&);

      virtual void
      pValue ();

      virtual void
      post_StringType ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */,
               ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel& /* NameSpace */,
               ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel& /* MergePriority */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel& /* ExposeStatic */,
               ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel& /* Extension */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* ToolTip */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Description */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* DisplayName */,
               ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel& /* Visibility */,
               ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel& /* DocuURL */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* IsDeprecated */,
               ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel& /* EventID */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsImplemented */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsAvailable */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsLocked */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pBlockPolling */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* ImposedAccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pError */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pCastAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pInvalidator */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* Streamable */,
               ::xml_schema::string_pskel& /* Value */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pValue */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      NameSpace_parser (::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel&);

      void
      MergePriority_parser (::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel&);

      void
      ExposeStatic_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel&);

      // Individual element parsers.
      //
      void
      Extension_parser (::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel&);

      void
      ToolTip_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Description_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      DisplayName_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Visibility_parser (::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel&);

      void
      DocuURL_parser (::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel&);

      void
      IsDeprecated_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      EventID_parser (::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel&);

      void
      pIsImplemented_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsAvailable_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsLocked_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pBlockPolling_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      ImposedAccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pError_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pCastAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pInvalidator_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Streamable_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      Value_parser (::xml_schema::string_pskel&);

      void
      pValue_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      StringType_pskel ();

      // Implementation details.
      //
      protected:
      StringType_pskel* StringType_impl_;
      StringType_pskel (StringType_pskel*, void*);

      protected:
      virtual bool
      _start_element_impl (const ::xsde::cxx::ro_string&,
                           const ::xsde::cxx::ro_string&);

      virtual bool
      _end_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel* NameSpace_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel* MergePriority_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel* ExposeStatic_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel* Extension_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* ToolTip_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Description_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* DisplayName_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel* Visibility_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel* DocuURL_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* IsDeprecated_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel* EventID_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsImplemented_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsAvailable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsLocked_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pBlockPolling_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* ImposedAccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pError_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pCastAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pInvalidator_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* Streamable_parser_;
      ::xml_schema::string_pskel* Value_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pValue_parser_;

      public:
      struct v_state_descr_
      {
        void (::GENAPI_NAMESPACE::Version_1_1::StringType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xsde::cxx::ro_string&,
          const ::xsde::cxx::ro_string&,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[3UL];
        unsigned long size;
      };

      protected:
      v_state_ v_state_first_;
      ::xsde::cxx::stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_1 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_0 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      choice_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class StringRegType_pskel: public ::xsde::cxx::parser::validating::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      Streamable ();

      enum choice_arm_tag
      {
        Address_tag,
        IntSwissKnife_tag,
        pAddress_tag,
        pIndex_tag
      };

      virtual void
      choice_arm (choice_arm_tag);

      virtual void
      Address ();

      virtual void
      IntSwissKnife ();

      virtual void
      pAddress ();

      virtual void
      pIndex ();

      enum choice1_arm_tag
      {
        Length_tag,
        pLength_tag
      };

      virtual void
      choice1_arm (choice1_arm_tag);

      virtual void
      Length ();

      virtual void
      pLength ();

      virtual void
      AccessMode ();

      virtual void
      pPort ();

      virtual void
      Cachable ();

      virtual void
      PollingTime ();

      virtual void
      pInvalidator ();

      virtual void
      post_StringRegType ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */,
               ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel& /* NameSpace */,
               ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel& /* MergePriority */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel& /* ExposeStatic */,
               ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel& /* Extension */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* ToolTip */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Description */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* DisplayName */,
               ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel& /* Visibility */,
               ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel& /* DocuURL */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* IsDeprecated */,
               ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel& /* EventID */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsImplemented */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsAvailable */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsLocked */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pBlockPolling */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* ImposedAccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pError */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pCastAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* Streamable */,
               ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* Address */,
               ::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel& /* IntSwissKnife */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAddress */,
               ::GENAPI_NAMESPACE::Version_1_1::pIndexType_pskel& /* pIndex */,
               ::GENAPI_NAMESPACE::Version_1_1::PositiveHexOrDecimal_t_pskel& /* Length */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pLength */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* AccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pPort */,
               ::GENAPI_NAMESPACE::Version_1_1::CachingMode_te_pskel& /* Cachable */,
               ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel& /* PollingTime */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pInvalidator */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      NameSpace_parser (::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel&);

      void
      MergePriority_parser (::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel&);

      void
      ExposeStatic_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel&);

      // Individual element parsers.
      //
      void
      Extension_parser (::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel&);

      void
      ToolTip_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Description_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      DisplayName_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Visibility_parser (::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel&);

      void
      DocuURL_parser (::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel&);

      void
      IsDeprecated_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      EventID_parser (::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel&);

      void
      pIsImplemented_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsAvailable_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsLocked_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pBlockPolling_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      ImposedAccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pError_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pCastAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Streamable_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      Address_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      void
      IntSwissKnife_parser (::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel&);

      void
      pAddress_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIndex_parser (::GENAPI_NAMESPACE::Version_1_1::pIndexType_pskel&);

      void
      Length_parser (::GENAPI_NAMESPACE::Version_1_1::PositiveHexOrDecimal_t_pskel&);

      void
      pLength_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      AccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pPort_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Cachable_parser (::GENAPI_NAMESPACE::Version_1_1::CachingMode_te_pskel&);

      void
      PollingTime_parser (::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel&);

      void
      pInvalidator_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      StringRegType_pskel ();

      // Implementation details.
      //
      protected:
      StringRegType_pskel* StringRegType_impl_;
      StringRegType_pskel (StringRegType_pskel*, void*);

      protected:
      virtual bool
      _start_element_impl (const ::xsde::cxx::ro_string&,
                           const ::xsde::cxx::ro_string&);

      virtual bool
      _end_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel* NameSpace_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel* MergePriority_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel* ExposeStatic_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel* Extension_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* ToolTip_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Description_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* DisplayName_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel* Visibility_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel* DocuURL_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* IsDeprecated_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel* EventID_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsImplemented_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsAvailable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsLocked_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pBlockPolling_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* ImposedAccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pError_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pCastAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* Streamable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* Address_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel* IntSwissKnife_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAddress_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::pIndexType_pskel* pIndex_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::PositiveHexOrDecimal_t_pskel* Length_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pLength_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* AccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pPort_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CachingMode_te_pskel* Cachable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel* PollingTime_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pInvalidator_parser_;

      public:
      struct v_state_descr_
      {
        void (::GENAPI_NAMESPACE::Version_1_1::StringRegType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xsde::cxx::ro_string&,
          const ::xsde::cxx::ro_string&,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[4UL];
        unsigned long size;
      };

      protected:
      v_state_ v_state_first_;
      ::xsde::cxx::stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_2 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_1 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_0 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      choice_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      void
      choice_1 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class RegisterType_pskel: public ::xsde::cxx::parser::validating::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      Streamable ();

      enum choice_arm_tag
      {
        Address_tag,
        IntSwissKnife_tag,
        pAddress_tag,
        pIndex_tag
      };

      virtual void
      choice_arm (choice_arm_tag);

      virtual void
      Address ();

      virtual void
      IntSwissKnife ();

      virtual void
      pAddress ();

      virtual void
      pIndex ();

      enum choice1_arm_tag
      {
        Length_tag,
        pLength_tag
      };

      virtual void
      choice1_arm (choice1_arm_tag);

      virtual void
      Length ();

      virtual void
      pLength ();

      virtual void
      AccessMode ();

      virtual void
      pPort ();

      virtual void
      Cachable ();

      virtual void
      PollingTime ();

      virtual void
      pInvalidator ();

      virtual void
      post_RegisterType ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */,
               ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel& /* NameSpace */,
               ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel& /* MergePriority */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel& /* ExposeStatic */,
               ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel& /* Extension */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* ToolTip */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Description */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* DisplayName */,
               ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel& /* Visibility */,
               ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel& /* DocuURL */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* IsDeprecated */,
               ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel& /* EventID */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsImplemented */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsAvailable */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsLocked */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pBlockPolling */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* ImposedAccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pError */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pCastAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* Streamable */,
               ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* Address */,
               ::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel& /* IntSwissKnife */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAddress */,
               ::GENAPI_NAMESPACE::Version_1_1::pIndexType_pskel& /* pIndex */,
               ::GENAPI_NAMESPACE::Version_1_1::PositiveHexOrDecimal_t_pskel& /* Length */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pLength */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* AccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pPort */,
               ::GENAPI_NAMESPACE::Version_1_1::CachingMode_te_pskel& /* Cachable */,
               ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel& /* PollingTime */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pInvalidator */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      NameSpace_parser (::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel&);

      void
      MergePriority_parser (::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel&);

      void
      ExposeStatic_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel&);

      // Individual element parsers.
      //
      void
      Extension_parser (::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel&);

      void
      ToolTip_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Description_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      DisplayName_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Visibility_parser (::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel&);

      void
      DocuURL_parser (::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel&);

      void
      IsDeprecated_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      EventID_parser (::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel&);

      void
      pIsImplemented_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsAvailable_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsLocked_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pBlockPolling_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      ImposedAccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pError_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pCastAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Streamable_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      Address_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      void
      IntSwissKnife_parser (::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel&);

      void
      pAddress_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIndex_parser (::GENAPI_NAMESPACE::Version_1_1::pIndexType_pskel&);

      void
      Length_parser (::GENAPI_NAMESPACE::Version_1_1::PositiveHexOrDecimal_t_pskel&);

      void
      pLength_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      AccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pPort_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Cachable_parser (::GENAPI_NAMESPACE::Version_1_1::CachingMode_te_pskel&);

      void
      PollingTime_parser (::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel&);

      void
      pInvalidator_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      RegisterType_pskel ();

      // Implementation details.
      //
      protected:
      RegisterType_pskel* RegisterType_impl_;
      RegisterType_pskel (RegisterType_pskel*, void*);

      protected:
      virtual bool
      _start_element_impl (const ::xsde::cxx::ro_string&,
                           const ::xsde::cxx::ro_string&);

      virtual bool
      _end_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel* NameSpace_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel* MergePriority_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel* ExposeStatic_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel* Extension_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* ToolTip_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Description_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* DisplayName_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel* Visibility_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel* DocuURL_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* IsDeprecated_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel* EventID_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsImplemented_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsAvailable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsLocked_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pBlockPolling_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* ImposedAccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pError_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pCastAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* Streamable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* Address_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel* IntSwissKnife_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAddress_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::pIndexType_pskel* pIndex_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::PositiveHexOrDecimal_t_pskel* Length_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pLength_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* AccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pPort_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CachingMode_te_pskel* Cachable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel* PollingTime_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pInvalidator_parser_;

      public:
      struct v_state_descr_
      {
        void (::GENAPI_NAMESPACE::Version_1_1::RegisterType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xsde::cxx::ro_string&,
          const ::xsde::cxx::ro_string&,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[4UL];
        unsigned long size;
      };

      protected:
      v_state_ v_state_first_;
      ::xsde::cxx::stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_2 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_1 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_0 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      choice_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      void
      choice_1 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class SwissKnifeType_pskel: public ::xsde::cxx::parser::validating::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      Streamable ();

      virtual void
      pVariable ();

      virtual void
      Constant ();

      virtual void
      Expression ();

      virtual void
      Formula (const ::std::string&);

      virtual void
      Unit ();

      virtual void
      Representation ();

      virtual void
      DisplayNotation ();

      virtual void
      DisplayPrecision ();

      virtual void
      post_SwissKnifeType ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */,
               ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel& /* NameSpace */,
               ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel& /* MergePriority */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel& /* ExposeStatic */,
               ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel& /* Extension */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* ToolTip */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Description */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* DisplayName */,
               ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel& /* Visibility */,
               ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel& /* DocuURL */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* IsDeprecated */,
               ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel& /* EventID */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsImplemented */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsAvailable */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsLocked */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pBlockPolling */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* ImposedAccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pError */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pCastAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pInvalidator */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* Streamable */,
               ::GENAPI_NAMESPACE::Version_1_1::pVariable2_pskel& /* pVariable */,
               ::GENAPI_NAMESPACE::Version_1_1::Constant2_pskel& /* Constant */,
               ::GENAPI_NAMESPACE::Version_1_1::Expression2_pskel& /* Expression */,
               ::xml_schema::string_pskel& /* Formula */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Unit */,
               ::GENAPI_NAMESPACE::Version_1_1::FloatRepresentation_t_pskel& /* Representation */,
               ::GENAPI_NAMESPACE::Version_1_1::DisplayNotation_t_pskel& /* DisplayNotation */,
               ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* DisplayPrecision */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      NameSpace_parser (::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel&);

      void
      MergePriority_parser (::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel&);

      void
      ExposeStatic_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel&);

      // Individual element parsers.
      //
      void
      Extension_parser (::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel&);

      void
      ToolTip_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Description_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      DisplayName_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Visibility_parser (::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel&);

      void
      DocuURL_parser (::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel&);

      void
      IsDeprecated_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      EventID_parser (::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel&);

      void
      pIsImplemented_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsAvailable_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsLocked_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pBlockPolling_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      ImposedAccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pError_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pCastAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pInvalidator_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Streamable_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      pVariable_parser (::GENAPI_NAMESPACE::Version_1_1::pVariable2_pskel&);

      void
      Constant_parser (::GENAPI_NAMESPACE::Version_1_1::Constant2_pskel&);

      void
      Expression_parser (::GENAPI_NAMESPACE::Version_1_1::Expression2_pskel&);

      void
      Formula_parser (::xml_schema::string_pskel&);

      void
      Unit_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Representation_parser (::GENAPI_NAMESPACE::Version_1_1::FloatRepresentation_t_pskel&);

      void
      DisplayNotation_parser (::GENAPI_NAMESPACE::Version_1_1::DisplayNotation_t_pskel&);

      void
      DisplayPrecision_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      SwissKnifeType_pskel ();

      // Implementation details.
      //
      protected:
      SwissKnifeType_pskel* SwissKnifeType_impl_;
      SwissKnifeType_pskel (SwissKnifeType_pskel*, void*);

      protected:
      virtual bool
      _start_element_impl (const ::xsde::cxx::ro_string&,
                           const ::xsde::cxx::ro_string&);

      virtual bool
      _end_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel* NameSpace_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel* MergePriority_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel* ExposeStatic_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel* Extension_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* ToolTip_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Description_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* DisplayName_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel* Visibility_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel* DocuURL_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* IsDeprecated_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel* EventID_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsImplemented_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsAvailable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsLocked_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pBlockPolling_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* ImposedAccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pError_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pCastAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pInvalidator_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* Streamable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::pVariable2_pskel* pVariable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Constant2_pskel* Constant_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Expression2_pskel* Expression_parser_;
      ::xml_schema::string_pskel* Formula_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Unit_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::FloatRepresentation_t_pskel* Representation_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::DisplayNotation_t_pskel* DisplayNotation_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* DisplayPrecision_parser_;

      public:
      struct v_state_descr_
      {
        void (::GENAPI_NAMESPACE::Version_1_1::SwissKnifeType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xsde::cxx::ro_string&,
          const ::xsde::cxx::ro_string&,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[3UL];
        unsigned long size;
      };

      protected:
      v_state_ v_state_first_;
      ::xsde::cxx::stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_1 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_0 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class IntSwissKnifeType_pskel: public ::xsde::cxx::parser::validating::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      Streamable ();

      virtual void
      pVariable ();

      virtual void
      Constant ();

      virtual void
      Expression ();

      virtual void
      Formula (const ::std::string&);

      virtual void
      Unit ();

      virtual void
      Representation ();

      virtual void
      post_IntSwissKnifeType ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */,
               ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel& /* NameSpace */,
               ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel& /* MergePriority */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel& /* ExposeStatic */,
               ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel& /* Extension */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* ToolTip */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Description */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* DisplayName */,
               ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel& /* Visibility */,
               ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel& /* DocuURL */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* IsDeprecated */,
               ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel& /* EventID */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsImplemented */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsAvailable */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsLocked */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pBlockPolling */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* ImposedAccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pError */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pCastAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pInvalidator */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* Streamable */,
               ::GENAPI_NAMESPACE::Version_1_1::pVariable3_pskel& /* pVariable */,
               ::GENAPI_NAMESPACE::Version_1_1::Constant3_pskel& /* Constant */,
               ::GENAPI_NAMESPACE::Version_1_1::Expression3_pskel& /* Expression */,
               ::xml_schema::string_pskel& /* Formula */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Unit */,
               ::GENAPI_NAMESPACE::Version_1_1::IntRepresentation_t_pskel& /* Representation */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      NameSpace_parser (::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel&);

      void
      MergePriority_parser (::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel&);

      void
      ExposeStatic_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel&);

      // Individual element parsers.
      //
      void
      Extension_parser (::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel&);

      void
      ToolTip_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Description_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      DisplayName_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Visibility_parser (::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel&);

      void
      DocuURL_parser (::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel&);

      void
      IsDeprecated_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      EventID_parser (::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel&);

      void
      pIsImplemented_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsAvailable_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsLocked_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pBlockPolling_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      ImposedAccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pError_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pCastAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pInvalidator_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Streamable_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      pVariable_parser (::GENAPI_NAMESPACE::Version_1_1::pVariable3_pskel&);

      void
      Constant_parser (::GENAPI_NAMESPACE::Version_1_1::Constant3_pskel&);

      void
      Expression_parser (::GENAPI_NAMESPACE::Version_1_1::Expression3_pskel&);

      void
      Formula_parser (::xml_schema::string_pskel&);

      void
      Unit_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Representation_parser (::GENAPI_NAMESPACE::Version_1_1::IntRepresentation_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      IntSwissKnifeType_pskel ();

      // Implementation details.
      //
      protected:
      IntSwissKnifeType_pskel* IntSwissKnifeType_impl_;
      IntSwissKnifeType_pskel (IntSwissKnifeType_pskel*, void*);

      protected:
      virtual bool
      _start_element_impl (const ::xsde::cxx::ro_string&,
                           const ::xsde::cxx::ro_string&);

      virtual bool
      _end_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel* NameSpace_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel* MergePriority_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel* ExposeStatic_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel* Extension_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* ToolTip_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Description_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* DisplayName_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel* Visibility_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel* DocuURL_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* IsDeprecated_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel* EventID_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsImplemented_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsAvailable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsLocked_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pBlockPolling_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* ImposedAccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pError_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pCastAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pInvalidator_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* Streamable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::pVariable3_pskel* pVariable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Constant3_pskel* Constant_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Expression3_pskel* Expression_parser_;
      ::xml_schema::string_pskel* Formula_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Unit_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::IntRepresentation_t_pskel* Representation_parser_;

      public:
      struct v_state_descr_
      {
        void (::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xsde::cxx::ro_string&,
          const ::xsde::cxx::ro_string&,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[3UL];
        unsigned long size;
      };

      protected:
      v_state_ v_state_first_;
      ::xsde::cxx::stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_1 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_0 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class CName_t_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_CName_t ();

      // Constructor.
      //
      CName_t_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      CName_t_pskel* CName_t_impl_;
      CName_t_pskel (CName_t_pskel*, void*);
    };

    class pIndexType_pskel: public ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Offset ();

      virtual void
      pOffset ();

      virtual void
      post_pIndexType ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* Offset */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pOffset */);

      // Individual attribute parsers.
      //
      void
      Offset_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      void
      pOffset_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      pIndexType_pskel (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* tiein);

      // Implementation details.
      //
      protected:
      pIndexType_pskel* pIndexType_impl_;
      pIndexType_pskel (pIndexType_pskel*, void*);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* Offset_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pOffset_parser_;
    };

    class PortType_pskel: public ::xsde::cxx::parser::validating::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      enum choice_arm_tag
      {
        ChunkID_tag,
        pChunkID_tag
      };

      virtual void
      choice_arm (choice_arm_tag);

      virtual void
      ChunkID ();

      virtual void
      pChunkID ();

      virtual void
      SwapEndianess ();

      virtual void
      CacheChunkData ();

      virtual void
      post_PortType ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */,
               ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel& /* NameSpace */,
               ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel& /* MergePriority */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel& /* ExposeStatic */,
               ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel& /* Extension */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* ToolTip */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Description */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* DisplayName */,
               ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel& /* Visibility */,
               ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel& /* DocuURL */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* IsDeprecated */,
               ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel& /* EventID */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsImplemented */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsAvailable */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsLocked */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pBlockPolling */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* ImposedAccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pError */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pCastAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pInvalidator */,
               ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel& /* ChunkID */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pChunkID */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* SwapEndianess */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* CacheChunkData */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      NameSpace_parser (::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel&);

      void
      MergePriority_parser (::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel&);

      void
      ExposeStatic_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel&);

      // Individual element parsers.
      //
      void
      Extension_parser (::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel&);

      void
      ToolTip_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Description_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      DisplayName_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Visibility_parser (::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel&);

      void
      DocuURL_parser (::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel&);

      void
      IsDeprecated_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      EventID_parser (::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel&);

      void
      pIsImplemented_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsAvailable_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsLocked_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pBlockPolling_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      ImposedAccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pError_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pCastAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pInvalidator_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      ChunkID_parser (::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel&);

      void
      pChunkID_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      SwapEndianess_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      CacheChunkData_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      PortType_pskel ();

      // Implementation details.
      //
      protected:
      PortType_pskel* PortType_impl_;
      PortType_pskel (PortType_pskel*, void*);

      protected:
      virtual bool
      _start_element_impl (const ::xsde::cxx::ro_string&,
                           const ::xsde::cxx::ro_string&);

      virtual bool
      _end_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel* NameSpace_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel* MergePriority_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel* ExposeStatic_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel* Extension_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* ToolTip_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Description_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* DisplayName_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel* Visibility_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel* DocuURL_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* IsDeprecated_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel* EventID_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsImplemented_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsAvailable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsLocked_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pBlockPolling_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* ImposedAccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pError_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pCastAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pInvalidator_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel* ChunkID_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pChunkID_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* SwapEndianess_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* CacheChunkData_parser_;

      public:
      struct v_state_descr_
      {
        void (::GENAPI_NAMESPACE::Version_1_1::PortType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xsde::cxx::ro_string&,
          const ::xsde::cxx::ro_string&,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[3UL];
        unsigned long size;
      };

      protected:
      v_state_ v_state_first_;
      ::xsde::cxx::stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_1 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_0 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      choice_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class ConfRomType_pskel: public ::xsde::cxx::parser::validating::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      sequence_next ();

      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      Unit ();

      enum choice_arm_tag
      {
        Address_tag,
        IntSwissKnife_tag,
        pAddress_tag
      };

      virtual void
      choice_arm (choice_arm_tag);

      virtual void
      Address ();

      virtual void
      IntSwissKnife ();

      virtual void
      pAddress ();

      virtual void
      Length ();

      virtual void
      pPort ();

      enum choice1_arm_tag
      {
        TextDesc_tag,
        IntKey_tag
      };

      virtual void
      choice1_arm (choice1_arm_tag);

      virtual void
      TextDesc ();

      virtual void
      IntKey ();

      virtual void
      post_ConfRomType ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */,
               ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel& /* NameSpace */,
               ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel& /* MergePriority */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel& /* ExposeStatic */,
               ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel& /* Extension */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* ToolTip */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Description */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* DisplayName */,
               ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel& /* Visibility */,
               ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel& /* DocuURL */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* IsDeprecated */,
               ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel& /* EventID */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsImplemented */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsAvailable */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsLocked */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pBlockPolling */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* ImposedAccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pError */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pCastAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pInvalidator */,
               ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* Unit */,
               ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel& /* Address */,
               ::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel& /* IntSwissKnife */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAddress */,
               ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel& /* Length */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pPort */,
               ::GENAPI_NAMESPACE::Version_1_1::Key_t_pskel& /* TextDesc */,
               ::GENAPI_NAMESPACE::Version_1_1::Key_t_pskel& /* IntKey */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      NameSpace_parser (::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel&);

      void
      MergePriority_parser (::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel&);

      void
      ExposeStatic_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel&);

      // Individual element parsers.
      //
      void
      Extension_parser (::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel&);

      void
      ToolTip_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Description_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      DisplayName_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Visibility_parser (::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel&);

      void
      DocuURL_parser (::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel&);

      void
      IsDeprecated_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      EventID_parser (::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel&);

      void
      pIsImplemented_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsAvailable_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsLocked_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pBlockPolling_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      ImposedAccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pError_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pCastAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pInvalidator_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Unit_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      void
      Address_parser (::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel&);

      void
      IntSwissKnife_parser (::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel&);

      void
      pAddress_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Length_parser (::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel&);

      void
      pPort_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      TextDesc_parser (::GENAPI_NAMESPACE::Version_1_1::Key_t_pskel&);

      void
      IntKey_parser (::GENAPI_NAMESPACE::Version_1_1::Key_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      ConfRomType_pskel ();

      // Implementation details.
      //
      protected:
      ConfRomType_pskel* ConfRomType_impl_;
      ConfRomType_pskel (ConfRomType_pskel*, void*);

      protected:
      virtual bool
      _start_element_impl (const ::xsde::cxx::ro_string&,
                           const ::xsde::cxx::ro_string&);

      virtual bool
      _end_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel* NameSpace_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel* MergePriority_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel* ExposeStatic_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel* Extension_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* ToolTip_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Description_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* DisplayName_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel* Visibility_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel* DocuURL_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* IsDeprecated_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel* EventID_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsImplemented_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsAvailable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsLocked_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pBlockPolling_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* ImposedAccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pError_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pCastAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pInvalidator_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* Unit_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel* Address_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel* IntSwissKnife_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAddress_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel* Length_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pPort_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Key_t_pskel* TextDesc_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Key_t_pskel* IntKey_parser_;

      public:
      struct v_state_descr_
      {
        void (::GENAPI_NAMESPACE::Version_1_1::ConfRomType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xsde::cxx::ro_string&,
          const ::xsde::cxx::ro_string&,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[3UL];
        unsigned long size;
      };

      protected:
      v_state_ v_state_first_;
      ::xsde::cxx::stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_1 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_0 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      choice_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      void
      choice_1 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class TextDescType_pskel: public ::xsde::cxx::parser::validating::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      p1212Parser ();

      virtual void
      Key ();

      virtual void
      post_TextDescType ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */,
               ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel& /* NameSpace */,
               ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel& /* MergePriority */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel& /* ExposeStatic */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* p1212Parser */,
               ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* Key */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      NameSpace_parser (::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel&);

      void
      MergePriority_parser (::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel&);

      void
      ExposeStatic_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel&);

      // Individual element parsers.
      //
      void
      p1212Parser_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Key_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      TextDescType_pskel ();

      // Implementation details.
      //
      protected:
      TextDescType_pskel* TextDescType_impl_;
      TextDescType_pskel (TextDescType_pskel*, void*);

      protected:
      virtual bool
      _start_element_impl (const ::xsde::cxx::ro_string&,
                           const ::xsde::cxx::ro_string&);

      virtual bool
      _end_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel* NameSpace_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel* MergePriority_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel* ExposeStatic_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* p1212Parser_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* Key_parser_;

      public:
      struct v_state_descr_
      {
        void (::GENAPI_NAMESPACE::Version_1_1::TextDescType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xsde::cxx::ro_string&,
          const ::xsde::cxx::ro_string&,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[2UL];
        unsigned long size;
      };

      protected:
      v_state_ v_state_first_;
      ::xsde::cxx::stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_0 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class IntKeyType_pskel: public ::xsde::cxx::parser::validating::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      p1212Parser ();

      virtual void
      Key ();

      virtual void
      post_IntKeyType ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */,
               ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel& /* NameSpace */,
               ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel& /* MergePriority */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel& /* ExposeStatic */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* p1212Parser */,
               ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* Key */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      NameSpace_parser (::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel&);

      void
      MergePriority_parser (::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel&);

      void
      ExposeStatic_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel&);

      // Individual element parsers.
      //
      void
      p1212Parser_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Key_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      IntKeyType_pskel ();

      // Implementation details.
      //
      protected:
      IntKeyType_pskel* IntKeyType_impl_;
      IntKeyType_pskel (IntKeyType_pskel*, void*);

      protected:
      virtual bool
      _start_element_impl (const ::xsde::cxx::ro_string&,
                           const ::xsde::cxx::ro_string&);

      virtual bool
      _end_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel* NameSpace_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel* MergePriority_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel* ExposeStatic_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* p1212Parser_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* Key_parser_;

      public:
      struct v_state_descr_
      {
        void (::GENAPI_NAMESPACE::Version_1_1::IntKeyType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xsde::cxx::ro_string&,
          const ::xsde::cxx::ro_string&,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[2UL];
        unsigned long size;
      };

      protected:
      v_state_ v_state_first_;
      ::xsde::cxx::stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_0 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class DcamLockType_pskel: public ::xsde::cxx::parser::validating::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      Streamable ();

      enum choice_arm_tag
      {
        Address_tag,
        IntSwissKnife_tag,
        pAddress_tag,
        pIndex_tag
      };

      virtual void
      choice_arm (choice_arm_tag);

      virtual void
      Address ();

      virtual void
      IntSwissKnife ();

      virtual void
      pAddress ();

      virtual void
      pIndex ();

      enum choice1_arm_tag
      {
        Length_tag,
        pLength_tag
      };

      virtual void
      choice1_arm (choice1_arm_tag);

      virtual void
      Length ();

      virtual void
      pLength ();

      virtual void
      AccessMode ();

      virtual void
      pPort ();

      virtual void
      Cachable ();

      virtual void
      PollingTime ();

      virtual void
      pInvalidator ();

      virtual void
      FeatureID ();

      virtual void
      Timeout ();

      virtual void
      post_DcamLockType ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */,
               ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel& /* NameSpace */,
               ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel& /* MergePriority */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel& /* ExposeStatic */,
               ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel& /* Extension */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* ToolTip */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* Description */,
               ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel& /* DisplayName */,
               ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel& /* Visibility */,
               ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel& /* DocuURL */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* IsDeprecated */,
               ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel& /* EventID */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsImplemented */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsAvailable */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsLocked */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pBlockPolling */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* ImposedAccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pError */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pCastAlias */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel& /* Streamable */,
               ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* Address */,
               ::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel& /* IntSwissKnife */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAddress */,
               ::GENAPI_NAMESPACE::Version_1_1::pIndexType_pskel& /* pIndex */,
               ::GENAPI_NAMESPACE::Version_1_1::PositiveHexOrDecimal_t_pskel& /* Length */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pLength */,
               ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel& /* AccessMode */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pPort */,
               ::GENAPI_NAMESPACE::Version_1_1::CachingMode_te_pskel& /* Cachable */,
               ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel& /* PollingTime */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pInvalidator */,
               ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* FeatureID */,
               ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel& /* Timeout */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      NameSpace_parser (::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel&);

      void
      MergePriority_parser (::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel&);

      void
      ExposeStatic_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel&);

      // Individual element parsers.
      //
      void
      Extension_parser (::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel&);

      void
      ToolTip_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Description_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      DisplayName_parser (::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel&);

      void
      Visibility_parser (::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel&);

      void
      DocuURL_parser (::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel&);

      void
      IsDeprecated_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      EventID_parser (::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel&);

      void
      pIsImplemented_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsAvailable_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsLocked_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pBlockPolling_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      ImposedAccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pError_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pCastAlias_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Streamable_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel&);

      void
      Address_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      void
      IntSwissKnife_parser (::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel&);

      void
      pAddress_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIndex_parser (::GENAPI_NAMESPACE::Version_1_1::pIndexType_pskel&);

      void
      Length_parser (::GENAPI_NAMESPACE::Version_1_1::PositiveHexOrDecimal_t_pskel&);

      void
      pLength_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      AccessMode_parser (::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel&);

      void
      pPort_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      Cachable_parser (::GENAPI_NAMESPACE::Version_1_1::CachingMode_te_pskel&);

      void
      PollingTime_parser (::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel&);

      void
      pInvalidator_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      FeatureID_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      void
      Timeout_parser (::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      DcamLockType_pskel ();

      // Implementation details.
      //
      protected:
      DcamLockType_pskel* DcamLockType_impl_;
      DcamLockType_pskel (DcamLockType_pskel*, void*);

      protected:
      virtual bool
      _start_element_impl (const ::xsde::cxx::ro_string&,
                           const ::xsde::cxx::ro_string&);

      virtual bool
      _end_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel* NameSpace_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel* MergePriority_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel* ExposeStatic_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel* Extension_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* ToolTip_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* Description_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonEmptyString_t_pskel* DisplayName_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Visibility_te_pskel* Visibility_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::DocURL_t_pskel* DocuURL_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* IsDeprecated_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Hex_t_pskel* EventID_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsImplemented_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsAvailable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsLocked_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pBlockPolling_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* ImposedAccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pError_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pCastAlias_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_te_pskel* Streamable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* Address_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel* IntSwissKnife_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAddress_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::pIndexType_pskel* pIndex_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::PositiveHexOrDecimal_t_pskel* Length_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pLength_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::Access_te_pskel* AccessMode_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pPort_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CachingMode_te_pskel* Cachable_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel* PollingTime_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pInvalidator_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* FeatureID_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel* Timeout_parser_;

      public:
      struct v_state_descr_
      {
        void (::GENAPI_NAMESPACE::Version_1_1::DcamLockType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xsde::cxx::ro_string&,
          const ::xsde::cxx::ro_string&,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[4UL];
        unsigned long size;
      };

      protected:
      v_state_ v_state_first_;
      ::xsde::cxx::stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_2 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_1 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_0 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      choice_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      void
      choice_1 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class SmartFeatureAdrType_pskel: public ::xsde::cxx::parser::validating::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      FeatureID (const ::std::string&);

      enum choice_arm_tag
      {
        Address_tag,
        IntSwissKnife_tag,
        pAddress_tag
      };

      virtual void
      choice_arm (choice_arm_tag);

      virtual void
      Address ();

      virtual void
      IntSwissKnife ();

      virtual void
      pAddress ();

      virtual void
      pPort ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      post_SmartFeatureAdrType ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */,
               ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel& /* NameSpace */,
               ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel& /* MergePriority */,
               ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel& /* ExposeStatic */,
               ::xml_schema::string_pskel& /* FeatureID */,
               ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel& /* Address */,
               ::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel& /* IntSwissKnife */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pAddress */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pPort */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsImplemented */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* pIsAvailable */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      NameSpace_parser (::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel&);

      void
      MergePriority_parser (::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel&);

      void
      ExposeStatic_parser (::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel&);

      // Individual element parsers.
      //
      void
      FeatureID_parser (::xml_schema::string_pskel&);

      void
      Address_parser (::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel&);

      void
      IntSwissKnife_parser (::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel&);

      void
      pAddress_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pPort_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsImplemented_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      pIsAvailable_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      SmartFeatureAdrType_pskel ();

      // Implementation details.
      //
      protected:
      SmartFeatureAdrType_pskel* SmartFeatureAdrType_impl_;
      SmartFeatureAdrType_pskel (SmartFeatureAdrType_pskel*, void*);

      protected:
      virtual bool
      _start_element_impl (const ::xsde::cxx::ro_string&,
                           const ::xsde::cxx::ro_string&);

      virtual bool
      _end_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::NameSpace_te_pskel* NameSpace_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::MergePriority_t_pskel* MergePriority_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::YesNo_t_pskel* ExposeStatic_parser_;
      ::xml_schema::string_pskel* FeatureID_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel* Address_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel* IntSwissKnife_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pAddress_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pPort_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsImplemented_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* pIsAvailable_parser_;

      public:
      struct v_state_descr_
      {
        void (::GENAPI_NAMESPACE::Version_1_1::SmartFeatureAdrType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xsde::cxx::ro_string&,
          const ::xsde::cxx::ro_string&,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[3UL];
        unsigned long size;
      };

      protected:
      v_state_ v_state_first_;
      ::xsde::cxx::stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_0 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      choice_0 (unsigned long&,
                unsigned long&,
                const ::xsde::cxx::ro_string&,
                const ::xsde::cxx::ro_string&,
                bool);

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class ExtensionType_pskel: public ::xsde::cxx::parser::validating::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Elements.
      //
      virtual void
      post_ExtensionType ();

      // Constructor.
      //
      ExtensionType_pskel ();

      // Implementation details.
      //
      protected:
      ExtensionType_pskel* ExtensionType_impl_;
      ExtensionType_pskel (ExtensionType_pskel*, void*);

      protected:
      virtual bool
      _start_element_impl (const ::xsde::cxx::ro_string&,
                           const ::xsde::cxx::ro_string&);

      virtual bool
      _end_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

      public:
      struct v_state_descr_
      {
        void (::GENAPI_NAMESPACE::Version_1_1::ExtensionType_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xsde::cxx::ro_string&,
          const ::xsde::cxx::ro_string&,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[2UL];
        unsigned long size;
      };

      protected:
      v_state_ v_state_first_;
      ::xsde::cxx::stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_0 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);
    };

    class UpperCaseString_t_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_UpperCaseString_t ();

      // Constructor.
      //
      UpperCaseString_t_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      UpperCaseString_t_pskel* UpperCaseString_t_impl_;
      UpperCaseString_t_pskel (UpperCaseString_t_pskel*, void*);
    };

    class nonEmptyString_t_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_nonEmptyString_t ();

      // Constructor.
      //
      nonEmptyString_t_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      nonEmptyString_t_pskel* nonEmptyString_t_impl_;
      nonEmptyString_t_pskel (nonEmptyString_t_pskel*, void*);
    };

    class CachingMode_te_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_CachingMode_te ();

      // Constructor.
      //
      CachingMode_te_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      CachingMode_te_pskel* CachingMode_te_impl_;
      CachingMode_te_pskel (CachingMode_te_pskel*, void*);

      protected:
      static const char* const _xsde_CachingMode_te_pskel_enums_[4UL];
    };

    class HexOrDecimal_t_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_HexOrDecimal_t ();

      // Constructor.
      //
      HexOrDecimal_t_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      HexOrDecimal_t_pskel* HexOrDecimal_t_impl_;
      HexOrDecimal_t_pskel (HexOrDecimal_t_pskel*, void*);
    };

    class Hex_t_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_Hex_t ();

      // Constructor.
      //
      Hex_t_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      Hex_t_pskel* Hex_t_impl_;
      Hex_t_pskel (Hex_t_pskel*, void*);
    };

    class PositiveHexOrDecimal_t_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_PositiveHexOrDecimal_t ();

      // Constructor.
      //
      PositiveHexOrDecimal_t_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      PositiveHexOrDecimal_t_pskel* PositiveHexOrDecimal_t_impl_;
      PositiveHexOrDecimal_t_pskel (PositiveHexOrDecimal_t_pskel*, void*);
    };

    class nonNegativeHexOrDecimal_t_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_nonNegativeHexOrDecimal_t ();

      // Constructor.
      //
      nonNegativeHexOrDecimal_t_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      nonNegativeHexOrDecimal_t_pskel* nonNegativeHexOrDecimal_t_impl_;
      nonNegativeHexOrDecimal_t_pskel (nonNegativeHexOrDecimal_t_pskel*, void*);
    };

    class IntegerLength_t_pskel: public ::xml_schema::integer_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_IntegerLength_t ();

      // Constructor.
      //
      IntegerLength_t_pskel (::xml_schema::integer_pskel* tiein);

      // Implementation details.
      //
      virtual long
      post_integer ();

      protected:
      IntegerLength_t_pskel* IntegerLength_t_impl_;
      IntegerLength_t_pskel (IntegerLength_t_pskel*, void*);
    };

    class FloatLength_t_pskel: public ::xml_schema::integer_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_FloatLength_t ();

      // Constructor.
      //
      FloatLength_t_pskel (::xml_schema::integer_pskel* tiein);

      // Implementation details.
      //
      virtual long
      post_integer ();

      protected:
      FloatLength_t_pskel* FloatLength_t_impl_;
      FloatLength_t_pskel (FloatLength_t_pskel*, void*);
    };

    class MergePriority_t_pskel: public ::xml_schema::integer_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_MergePriority_t ();

      // Constructor.
      //
      MergePriority_t_pskel (::xml_schema::integer_pskel* tiein);

      // Implementation details.
      //
      virtual long
      post_integer ();

      protected:
      MergePriority_t_pskel* MergePriority_t_impl_;
      MergePriority_t_pskel (MergePriority_t_pskel*, void*);
    };

    class GUID_t_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_GUID_t ();

      // Constructor.
      //
      GUID_t_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      GUID_t_pskel* GUID_t_impl_;
      GUID_t_pskel (GUID_t_pskel*, void*);
    };

    class Sign_te_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_Sign_te ();

      // Constructor.
      //
      Sign_te_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      Sign_te_pskel* Sign_te_impl_;
      Sign_te_pskel (Sign_te_pskel*, void*);

      protected:
      static const char* const _xsde_Sign_te_pskel_enums_[3UL];
    };

    class SwissKnifeConversion_t_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Input ();

      virtual void
      post_SwissKnifeConversion_t ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Input */);

      // Individual attribute parsers.
      //
      void
      Input_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      SwissKnifeConversion_t_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      SwissKnifeConversion_t_pskel* SwissKnifeConversion_t_impl_;
      SwissKnifeConversion_t_pskel (SwissKnifeConversion_t_pskel*, void*);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Input_parser_;

      protected:
      struct v_state_attr_
      {
        bool Input;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class NameSpace_t_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_NameSpace_t ();

      // Constructor.
      //
      NameSpace_t_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      NameSpace_t_pskel* NameSpace_t_impl_;
      NameSpace_t_pskel (NameSpace_t_pskel*, void*);

      protected:
      static const char* const _xsde_NameSpace_t_pskel_enums_[2UL];
    };

    class NameSpace_te_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_NameSpace_te ();

      // Constructor.
      //
      NameSpace_te_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      NameSpace_te_pskel* NameSpace_te_impl_;
      NameSpace_te_pskel (NameSpace_te_pskel*, void*);

      protected:
      static const char* const _xsde_NameSpace_te_pskel_enums_[3UL];
    };

    class StandardNameSpace_t_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_StandardNameSpace_t ();

      // Constructor.
      //
      StandardNameSpace_t_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      StandardNameSpace_t_pskel* StandardNameSpace_t_impl_;
      StandardNameSpace_t_pskel (StandardNameSpace_t_pskel*, void*);

      protected:
      static const char* const _xsde_StandardNameSpace_t_pskel_enums_[5UL];
    };

    class IntRepresentation_t_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_IntRepresentation_t ();

      // Constructor.
      //
      IntRepresentation_t_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      IntRepresentation_t_pskel* IntRepresentation_t_impl_;
      IntRepresentation_t_pskel (IntRepresentation_t_pskel*, void*);

      protected:
      static const char* const _xsde_IntRepresentation_t_pskel_enums_[7UL];
    };

    class FloatRepresentation_t_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_FloatRepresentation_t ();

      // Constructor.
      //
      FloatRepresentation_t_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      FloatRepresentation_t_pskel* FloatRepresentation_t_impl_;
      FloatRepresentation_t_pskel (FloatRepresentation_t_pskel*, void*);

      protected:
      static const char* const _xsde_FloatRepresentation_t_pskel_enums_[3UL];
    };

    class Access_te_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_Access_te ();

      // Constructor.
      //
      Access_te_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      Access_te_pskel* Access_te_impl_;
      Access_te_pskel (Access_te_pskel*, void*);

      protected:
      static const char* const _xsde_Access_te_pskel_enums_[4UL];
    };

    class Endianess_te_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_Endianess_te ();

      // Constructor.
      //
      Endianess_te_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      Endianess_te_pskel* Endianess_te_impl_;
      Endianess_te_pskel (Endianess_te_pskel*, void*);

      protected:
      static const char* const _xsde_Endianess_te_pskel_enums_[3UL];
    };

    class Visibility_te_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_Visibility_te ();

      // Constructor.
      //
      Visibility_te_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      Visibility_te_pskel* Visibility_te_impl_;
      Visibility_te_pskel (Visibility_te_pskel*, void*);

      protected:
      static const char* const _xsde_Visibility_te_pskel_enums_[5UL];
    };

    class YesNo_t_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_YesNo_t ();

      // Constructor.
      //
      YesNo_t_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      YesNo_t_pskel* YesNo_t_impl_;
      YesNo_t_pskel (YesNo_t_pskel*, void*);

      protected:
      static const char* const _xsde_YesNo_t_pskel_enums_[2UL];
    };

    class YesNo_te_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_YesNo_te ();

      // Constructor.
      //
      YesNo_te_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      YesNo_te_pskel* YesNo_te_impl_;
      YesNo_te_pskel (YesNo_te_pskel*, void*);

      protected:
      static const char* const _xsde_YesNo_te_pskel_enums_[3UL];
    };

    class Slope_te_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_Slope_te ();

      // Constructor.
      //
      Slope_te_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      Slope_te_pskel* Slope_te_impl_;
      Slope_te_pskel (Slope_te_pskel*, void*);

      protected:
      static const char* const _xsde_Slope_te_pskel_enums_[5UL];
    };

    class Key_t_pskel: public ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      post_Key_t ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */,
               ::GENAPI_NAMESPACE::Version_1_1::NameSpace_t_pskel& /* NameSpace */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      NameSpace_parser (::GENAPI_NAMESPACE::Version_1_1::NameSpace_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      Key_t_pskel (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* tiein);

      // Implementation details.
      //
      protected:
      Key_t_pskel* Key_t_impl_;
      Key_t_pskel (Key_t_pskel*, void*);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::NameSpace_t_pskel* NameSpace_parser_;

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class DisplayNotation_t_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_DisplayNotation_t ();

      // Constructor.
      //
      DisplayNotation_t_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      DisplayNotation_t_pskel* DisplayNotation_t_impl_;
      DisplayNotation_t_pskel (DisplayNotation_t_pskel*, void*);

      protected:
      static const char* const _xsde_DisplayNotation_t_pskel_enums_[3UL];
    };

    class VariableName_t_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_VariableName_t ();

      // Constructor.
      //
      VariableName_t_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      VariableName_t_pskel* VariableName_t_impl_;
      VariableName_t_pskel (VariableName_t_pskel*, void*);
    };

    class DocURL_t_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      post_DocURL_t ();

      // Constructor.
      //
      DocURL_t_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      DocURL_t_pskel* DocURL_t_impl_;
      DocURL_t_pskel (DocURL_t_pskel*, void*);
    };

    class RegisterDescription_pskel: public ::xsde::cxx::parser::validating::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      ModelName ();

      virtual void
      VendorName ();

      virtual void
      ToolTip (const ::std::string&);

      virtual void
      StandardNameSpace ();

      virtual void
      SchemaMajorVersion ();

      virtual void
      SchemaMinorVersion ();

      virtual void
      SchemaSubMinorVersion ();

      virtual void
      MajorVersion ();

      virtual void
      MinorVersion ();

      virtual void
      SubMinorVersion ();

      virtual void
      ProductGuid ();

      virtual void
      VersionGuid ();

      // Elements.
      //
      virtual void
      sequence_next ();

      virtual void
      Node ();

      virtual void
      Category ();

      virtual void
      Integer ();

      virtual void
      IntReg ();

      virtual void
      MaskedIntReg ();

      virtual void
      Boolean ();

      virtual void
      Command ();

      virtual void
      Enumeration ();

	  virtual void
	  EnumEntry();

	  virtual void
      Float ();

      virtual void
      FloatReg ();

      virtual void
      String ();

      virtual void
      StringReg ();

      virtual void
      Register ();

      virtual void
      Converter ();

      virtual void
      IntConverter ();

      virtual void
      SwissKnife ();

      virtual void
      IntSwissKnife ();

      virtual void
      Port ();

      virtual void
      ConfRom ();

      virtual void
      TextDesc ();

      virtual void
      IntKey ();

      virtual void
      AdvFeatureLock ();

      virtual void
      SmartFeature ();

      virtual void
      Group ();

      virtual void
      StructReg ();

      virtual void
      post_RegisterDescription ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* ModelName */,
               ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* VendorName */,
               ::xml_schema::string_pskel& /* ToolTip */,
               ::GENAPI_NAMESPACE::Version_1_1::StandardNameSpace_t_pskel& /* StandardNameSpace */,
               ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel& /* SchemaMajorVersion */,
               ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel& /* SchemaMinorVersion */,
               ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel& /* SchemaSubMinorVersion */,
               ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel& /* MajorVersion */,
               ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel& /* MinorVersion */,
               ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel& /* SubMinorVersion */,
               ::GENAPI_NAMESPACE::Version_1_1::GUID_t_pskel& /* ProductGuid */,
               ::GENAPI_NAMESPACE::Version_1_1::GUID_t_pskel& /* VersionGuid */,
               ::GENAPI_NAMESPACE::Version_1_1::NodeType_pskel& /* Node */,
               ::GENAPI_NAMESPACE::Version_1_1::CategoryType_pskel& /* Category */,
               ::GENAPI_NAMESPACE::Version_1_1::IntegerType_pskel& /* Integer */,
               ::GENAPI_NAMESPACE::Version_1_1::IntRegType_pskel& /* IntReg */,
               ::GENAPI_NAMESPACE::Version_1_1::MaskedIntRegType_pskel& /* MaskedIntReg */,
               ::GENAPI_NAMESPACE::Version_1_1::BooleanType_pskel& /* Boolean */,
               ::GENAPI_NAMESPACE::Version_1_1::CommandType_pskel& /* Command */,
               ::GENAPI_NAMESPACE::Version_1_1::EnumerationType_pskel& /* Enumeration */,
			   ::GENAPI_NAMESPACE::Version_1_1::EnumEntryType_pskel& /* EnumEntry */,
			   ::GENAPI_NAMESPACE::Version_1_1::FloatType_pskel& /* Float */,
               ::GENAPI_NAMESPACE::Version_1_1::FloatRegType_pskel& /* FloatReg */,
               ::GENAPI_NAMESPACE::Version_1_1::StringType_pskel& /* String */,
               ::GENAPI_NAMESPACE::Version_1_1::StringRegType_pskel& /* StringReg */,
               ::GENAPI_NAMESPACE::Version_1_1::RegisterType_pskel& /* Register */,
               ::GENAPI_NAMESPACE::Version_1_1::ConverterType_pskel& /* Converter */,
               ::GENAPI_NAMESPACE::Version_1_1::IntConverterType_pskel& /* IntConverter */,
               ::GENAPI_NAMESPACE::Version_1_1::SwissKnifeType_pskel& /* SwissKnife */,
               ::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel& /* IntSwissKnife */,
               ::GENAPI_NAMESPACE::Version_1_1::PortType_pskel& /* Port */,
               ::GENAPI_NAMESPACE::Version_1_1::ConfRomType_pskel& /* ConfRom */,
               ::GENAPI_NAMESPACE::Version_1_1::TextDescType_pskel& /* TextDesc */,
               ::GENAPI_NAMESPACE::Version_1_1::IntKeyType_pskel& /* IntKey */,
               ::GENAPI_NAMESPACE::Version_1_1::DcamLockType_pskel& /* AdvFeatureLock */,
               ::GENAPI_NAMESPACE::Version_1_1::SmartFeatureAdrType_pskel& /* SmartFeature */,
               ::GENAPI_NAMESPACE::Version_1_1::GroupType_pskel& /* Group */,
               ::GENAPI_NAMESPACE::Version_1_1::StructRegType_pskel& /* StructReg */);

      // Individual attribute parsers.
      //
      void
      ModelName_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      VendorName_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      void
      ToolTip_parser (::xml_schema::string_pskel&);

      void
      StandardNameSpace_parser (::GENAPI_NAMESPACE::Version_1_1::StandardNameSpace_t_pskel&);

      void
      SchemaMajorVersion_parser (::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel&);

      void
      SchemaMinorVersion_parser (::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel&);

      void
      SchemaSubMinorVersion_parser (::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel&);

      void
      MajorVersion_parser (::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel&);

      void
      MinorVersion_parser (::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel&);

      void
      SubMinorVersion_parser (::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel&);

      void
      ProductGuid_parser (::GENAPI_NAMESPACE::Version_1_1::GUID_t_pskel&);

      void
      VersionGuid_parser (::GENAPI_NAMESPACE::Version_1_1::GUID_t_pskel&);

      // Individual element parsers.
      //
      void
      Node_parser (::GENAPI_NAMESPACE::Version_1_1::NodeType_pskel&);

      void
      Category_parser (::GENAPI_NAMESPACE::Version_1_1::CategoryType_pskel&);

      void
      Integer_parser (::GENAPI_NAMESPACE::Version_1_1::IntegerType_pskel&);

      void
      IntReg_parser (::GENAPI_NAMESPACE::Version_1_1::IntRegType_pskel&);

      void
      MaskedIntReg_parser (::GENAPI_NAMESPACE::Version_1_1::MaskedIntRegType_pskel&);

      void
      Boolean_parser (::GENAPI_NAMESPACE::Version_1_1::BooleanType_pskel&);

      void
      Command_parser (::GENAPI_NAMESPACE::Version_1_1::CommandType_pskel&);

      void
      Enumeration_parser (::GENAPI_NAMESPACE::Version_1_1::EnumerationType_pskel&);

	  void
	  EnumEntry_parser(::GenApi::Version_1_1::EnumEntryType_pskel&);

      void
      Float_parser (::GENAPI_NAMESPACE::Version_1_1::FloatType_pskel&);

      void
      FloatReg_parser (::GENAPI_NAMESPACE::Version_1_1::FloatRegType_pskel&);

      void
      String_parser (::GENAPI_NAMESPACE::Version_1_1::StringType_pskel&);

      void
      StringReg_parser (::GENAPI_NAMESPACE::Version_1_1::StringRegType_pskel&);

      void
      Register_parser (::GENAPI_NAMESPACE::Version_1_1::RegisterType_pskel&);

      void
      Converter_parser (::GENAPI_NAMESPACE::Version_1_1::ConverterType_pskel&);

      void
      IntConverter_parser (::GENAPI_NAMESPACE::Version_1_1::IntConverterType_pskel&);

      void
      SwissKnife_parser (::GENAPI_NAMESPACE::Version_1_1::SwissKnifeType_pskel&);

      void
      IntSwissKnife_parser (::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel&);

      void
      Port_parser (::GENAPI_NAMESPACE::Version_1_1::PortType_pskel&);

      void
      ConfRom_parser (::GENAPI_NAMESPACE::Version_1_1::ConfRomType_pskel&);

      void
      TextDesc_parser (::GENAPI_NAMESPACE::Version_1_1::TextDescType_pskel&);

      void
      IntKey_parser (::GENAPI_NAMESPACE::Version_1_1::IntKeyType_pskel&);

      void
      AdvFeatureLock_parser (::GENAPI_NAMESPACE::Version_1_1::DcamLockType_pskel&);

      void
      SmartFeature_parser (::GENAPI_NAMESPACE::Version_1_1::SmartFeatureAdrType_pskel&);

      void
      Group_parser (::GENAPI_NAMESPACE::Version_1_1::GroupType_pskel&);

      void
      StructReg_parser (::GENAPI_NAMESPACE::Version_1_1::StructRegType_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      RegisterDescription_pskel ();

      // Implementation details.
      //
      protected:
      RegisterDescription_pskel* RegisterDescription_impl_;
      RegisterDescription_pskel (RegisterDescription_pskel*, void*);

      protected:
      virtual bool
      _start_element_impl (const ::xsde::cxx::ro_string&,
                           const ::xsde::cxx::ro_string&);

      virtual bool
      _end_element_impl (const ::xsde::cxx::ro_string&,
                         const ::xsde::cxx::ro_string&);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* ModelName_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* VendorName_parser_;
      ::xml_schema::string_pskel* ToolTip_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::StandardNameSpace_t_pskel* StandardNameSpace_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel* SchemaMajorVersion_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel* SchemaMinorVersion_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel* SchemaSubMinorVersion_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel* MajorVersion_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel* MinorVersion_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::nonNegativeHexOrDecimal_t_pskel* SubMinorVersion_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::GUID_t_pskel* ProductGuid_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::GUID_t_pskel* VersionGuid_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::NodeType_pskel* Node_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CategoryType_pskel* Category_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::IntegerType_pskel* Integer_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::IntRegType_pskel* IntReg_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::MaskedIntRegType_pskel* MaskedIntReg_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::BooleanType_pskel* Boolean_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::CommandType_pskel* Command_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::EnumerationType_pskel* Enumeration_parser_;
	  ::GENAPI_NAMESPACE::Version_1_1::EnumEntryType_pskel* EnumEntry_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::FloatType_pskel* Float_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::FloatRegType_pskel* FloatReg_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::StringType_pskel* String_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::StringRegType_pskel* StringReg_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::RegisterType_pskel* Register_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::ConverterType_pskel* Converter_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::IntConverterType_pskel* IntConverter_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::SwissKnifeType_pskel* SwissKnife_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::IntSwissKnifeType_pskel* IntSwissKnife_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::PortType_pskel* Port_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::ConfRomType_pskel* ConfRom_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::TextDescType_pskel* TextDesc_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::IntKeyType_pskel* IntKey_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::DcamLockType_pskel* AdvFeatureLock_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::SmartFeatureAdrType_pskel* SmartFeature_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::GroupType_pskel* Group_parser_;
      ::GENAPI_NAMESPACE::Version_1_1::StructRegType_pskel* StructReg_parser_;

      public:
      struct v_state_descr_
      {
        void (::GENAPI_NAMESPACE::Version_1_1::RegisterDescription_pskel::*func) (
          unsigned long&,
          unsigned long&,
          const ::xsde::cxx::ro_string&,
          const ::xsde::cxx::ro_string&,
          bool);
        unsigned long state;
        unsigned long count;
      };

      struct v_state_
      {
        v_state_descr_ data[3UL];
        unsigned long size;
      };

      protected:
      v_state_ v_state_first_;
      ::xsde::cxx::stack v_state_stack_;

      virtual void
      _pre_e_validate ();

      virtual void
      _post_e_validate ();

      void
      sequence_1 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      void
      sequence_0 (unsigned long&,
                  unsigned long&,
                  const ::xsde::cxx::ro_string&,
                  const ::xsde::cxx::ro_string&,
                  bool);

      protected:
      struct v_state_attr_
      {
        bool ModelName;
        bool VendorName;
        bool StandardNameSpace;
        bool SchemaMajorVersion;
        bool SchemaMinorVersion;
        bool SchemaSubMinorVersion;
        bool MajorVersion;
        bool MinorVersion;
        bool SubMinorVersion;
        bool ProductGuid;
        bool VersionGuid;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class ValueIndexed_pskel: public ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Index ();

      virtual void
      post_ValueIndexed ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* Index */);

      // Individual attribute parsers.
      //
      void
      Index_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      ValueIndexed_pskel (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* tiein);

      // Implementation details.
      //
      protected:
      ValueIndexed_pskel* ValueIndexed_impl_;
      ValueIndexed_pskel (ValueIndexed_pskel*, void*);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* Index_parser_;

      protected:
      struct v_state_attr_
      {
        bool Index;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class pValueIndexed_pskel: public ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Index ();

      virtual void
      post_pValueIndexed ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* Index */);

      // Individual attribute parsers.
      //
      void
      Index_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      pValueIndexed_pskel (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* tiein);

      // Implementation details.
      //
      protected:
      pValueIndexed_pskel* pValueIndexed_impl_;
      pValueIndexed_pskel (pValueIndexed_pskel*, void*);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* Index_parser_;

      protected:
      struct v_state_attr_
      {
        bool Index;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class ValueIndexed1_pskel: public ::xml_schema::double_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Index ();

      virtual void
      post_ValueIndexed1 ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* Index */);

      // Individual attribute parsers.
      //
      void
      Index_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      ValueIndexed1_pskel (::xml_schema::double_pskel* tiein);

      // Implementation details.
      //
      virtual double
      post_double ();

      protected:
      ValueIndexed1_pskel* ValueIndexed1_impl_;
      ValueIndexed1_pskel (ValueIndexed1_pskel*, void*);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* Index_parser_;

      protected:
      struct v_state_attr_
      {
        bool Index;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class pValueIndexed1_pskel: public ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Index ();

      virtual void
      post_pValueIndexed1 ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel& /* Index */);

      // Individual attribute parsers.
      //
      void
      Index_parser (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      pValueIndexed1_pskel (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* tiein);

      // Implementation details.
      //
      protected:
      pValueIndexed1_pskel* pValueIndexed1_impl_;
      pValueIndexed1_pskel (pValueIndexed1_pskel*, void*);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* Index_parser_;

      protected:
      struct v_state_attr_
      {
        bool Index;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class pVariable_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      post_pVariable ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::VariableName_t_pskel& /* Name */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::VariableName_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      pVariable_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      pVariable_pskel* pVariable_impl_;
      pVariable_pskel (pVariable_pskel*, void*);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::VariableName_t_pskel* Name_parser_;

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class Constant_pskel: public ::xml_schema::double_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      post_Constant ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      Constant_pskel (::xml_schema::double_pskel* tiein);

      // Implementation details.
      //
      virtual double
      post_double ();

      protected:
      Constant_pskel* Constant_impl_;
      Constant_pskel (Constant_pskel*, void*);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class Expression_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      post_Expression ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      Expression_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      Expression_pskel* Expression_impl_;
      Expression_pskel (Expression_pskel*, void*);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class pVariable1_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      post_pVariable1 ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::VariableName_t_pskel& /* Name */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::VariableName_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      pVariable1_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      pVariable1_pskel* pVariable1_impl_;
      pVariable1_pskel (pVariable1_pskel*, void*);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::VariableName_t_pskel* Name_parser_;

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class Constant1_pskel: public ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      post_Constant1 ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      Constant1_pskel (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* tiein);

      // Implementation details.
      //
      protected:
      Constant1_pskel* Constant1_impl_;
      Constant1_pskel (Constant1_pskel*, void*);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class Expression1_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      post_Expression1 ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      Expression1_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      Expression1_pskel* Expression1_impl_;
      Expression1_pskel (Expression1_pskel*, void*);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class pVariable2_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      post_pVariable2 ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::VariableName_t_pskel& /* Name */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::VariableName_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      pVariable2_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      pVariable2_pskel* pVariable2_impl_;
      pVariable2_pskel (pVariable2_pskel*, void*);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::VariableName_t_pskel* Name_parser_;

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class Constant2_pskel: public ::xml_schema::double_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      post_Constant2 ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      Constant2_pskel (::xml_schema::double_pskel* tiein);

      // Implementation details.
      //
      virtual double
      post_double ();

      protected:
      Constant2_pskel* Constant2_impl_;
      Constant2_pskel (Constant2_pskel*, void*);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class Expression2_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      post_Expression2 ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      Expression2_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      Expression2_pskel* Expression2_impl_;
      Expression2_pskel (Expression2_pskel*, void*);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class pVariable3_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      post_pVariable3 ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::VariableName_t_pskel& /* Name */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::VariableName_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      pVariable3_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      pVariable3_pskel* pVariable3_impl_;
      pVariable3_pskel (pVariable3_pskel*, void*);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::VariableName_t_pskel* Name_parser_;

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class Constant3_pskel: public ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      post_Constant3 ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      Constant3_pskel (::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pskel* tiein);

      // Implementation details.
      //
      protected:
      Constant3_pskel* Constant3_impl_;
      Constant3_pskel (Constant3_pskel*, void*);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };

    class Expression3_pskel: public ::xml_schema::string_pskel
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      post_Expression3 ();

      // Parser construction API.
      //
      void
      parsers (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel& /* Name */);

      // Individual attribute parsers.
      //
      void
      Name_parser (::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel&);

      virtual void
      _reset ();

      // Constructor.
      //
      Expression3_pskel (::xml_schema::string_pskel* tiein);

      // Implementation details.
      //
      virtual ::std::string
      post_string ();

      protected:
      Expression3_pskel* Expression3_impl_;
      Expression3_pskel (Expression3_pskel*, void*);

      protected:
      virtual bool
      _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&,
                                 const ::xsde::cxx::ro_string&);


      protected:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pskel* Name_parser_;

      protected:
      struct v_state_attr_
      {
        bool Name;
      };

      v_state_attr_ v_state_attr_first_;
      ::xsde::cxx::stack v_state_attr_stack_;

      virtual void
      _pre_a_validate ();

      virtual void
      _post_a_validate ();
    };
  }
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsde/cxx/post.hxx>

#endif // GEN_API_SCHEMA_VERSION_1_1_PSKEL_HXX
