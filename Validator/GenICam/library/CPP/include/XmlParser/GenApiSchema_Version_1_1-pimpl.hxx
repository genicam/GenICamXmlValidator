// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD/e,
// an XML Schema to C++ data binding compiler for embedded systems. You
// may use it in your programs without any restrictions.
//

#ifndef GEN_API_SCHEMA_VERSION_1_1_PIMPL_HXX
#define GEN_API_SCHEMA_VERSION_1_1_PIMPL_HXX

#include "NodeMapDataPtrs.h"

#include "GenApiSchema_Version_1_1-pskel.hxx"

namespace GENAPI_NAMESPACE
{
  namespace Version_1_1
  {
    class GroupType_pimpl: public GroupType_pskel
    {
      public:

	  CNodeMapDataPtrsWithCleanup nodeMapDataPtrs;
	  
      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Comment (const ::std::string&);

      // Elements.
      //
      virtual void
      Node ();

      virtual void
      Category ();

      virtual void
      Integer ();

      virtual void
      IntReg ();

      virtual void
      MaskedIntReg ();

      virtual void
      Boolean ();

      virtual void
      Command ();

      virtual void
      Enumeration ();

	  virtual void
	  EnumEntry();

	  virtual void
      Float ();

      virtual void
      FloatReg ();

      virtual void
      String ();

      virtual void
      StringReg ();

      virtual void
      Register ();

      virtual void
      Converter ();

      virtual void
      IntConverter ();

      virtual void
      SwissKnife ();

      virtual void
      IntSwissKnife ();

      virtual void
      Port ();

      virtual void
      ConfRom ();

      virtual void
      TextDesc ();

      virtual void
      IntKey ();

      virtual void
      AdvFeatureLock ();

      virtual void
      SmartFeature ();

      virtual void
      Group ();

      virtual void
      StructReg ();

      virtual void
      post_GroupType ();
    };

    class NodeType_pimpl: public NodeType_pskel
    {
      public:
	  CNodeMapDataPtrsWithCleanup nodeMapDataPtrs;

	  virtual void
	  _reset();
	  
      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      post_NodeType ();
    };

    class CategoryType_pimpl: public CategoryType_pskel
    {
      public:
	  CNodeMapDataPtrsWithCleanup nodeMapDataPtrs;

	  virtual void
	  _reset();
	  
      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      pFeature ();

      virtual void
      post_CategoryType ();
    };

    class IntegerType_pimpl: public IntegerType_pskel
    {
      public:
	  CNodeMapDataPtrsWithCleanup nodeMapDataPtrs;

	  virtual void
	  _reset();
	  
      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      Streamable ();

      virtual void
      Value ();

      virtual void
      pValueCopy ();

      virtual void
      pValue ();

      virtual void
      pValueCopy1 ();

      virtual void
      pIndex ();

      virtual void
      ValueIndexed ();

      virtual void
      pValueIndexed ();

      virtual void
      ValueDefault ();

      virtual void
      pValueDefault ();

      virtual void
      Min ();

      virtual void
      pMin ();

      virtual void
      Max ();

      virtual void
      pMax ();

      virtual void
      Inc ();

      virtual void
      pInc ();

      virtual void
      Unit ();

      virtual void
      Representation ();

      virtual void
      ValidValueSet ();

      virtual void
      pSelected ();

      virtual void
      post_IntegerType ();
    };

    class IntRegType_pimpl: public IntRegType_pskel
    {
      public:
	  CNodeMapDataPtrsWithCleanup nodeMapDataPtrs;

	  virtual void
	  _reset();
	  
      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      Streamable ();

      virtual void
      Address ();

      virtual void
      IntSwissKnife ();

      virtual void
      pAddress ();

      virtual void
      pIndex ();

      virtual void
      Length ();

      virtual void
      pLength ();

      virtual void
      AccessMode ();

      virtual void
      pPort ();

      virtual void
      Cachable ();

      virtual void
      PollingTime ();

      virtual void
      pInvalidator ();

      virtual void
      Sign ();

      virtual void
      Endianess ();

      virtual void
      Unit ();

      virtual void
      Representation ();

      virtual void
      pSelected ();

      virtual void
      post_IntRegType ();
    };

    class MaskedIntRegType_pimpl: public MaskedIntRegType_pskel
    {
      public:
	  CNodeMapDataPtrsWithCleanup nodeMapDataPtrs;

	  virtual void
	  _reset();
	  
      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      Streamable ();

      virtual void
      Address ();

      virtual void
      IntSwissKnife ();

      virtual void
      pAddress ();

      virtual void
      pIndex ();

      virtual void
      Length ();

      virtual void
      AccessMode ();

      virtual void
      pPort ();

      virtual void
      Cachable ();

      virtual void
      PollingTime ();

      virtual void
      pInvalidator ();

      virtual void
      Bit ();

      virtual void
      LSB ();

      virtual void
      MSB ();

      virtual void
      Sign ();

      virtual void
      Endianess ();

      virtual void
      Unit ();

      virtual void
      Representation ();

      virtual void
      pSelected ();

      virtual void
      post_MaskedIntRegType ();
    };

    class StructRegType_pimpl: public StructRegType_pskel
    {
      public:
	  CNodeMapDataPtrsWithCleanup nodeMapDataPtrs;

	  virtual void
	  _reset();
	  
      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Comment (const ::std::string&);

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      Streamable ();

      virtual void
      Address ();

      virtual void
      IntSwissKnife ();

      virtual void
      pAddress ();

      virtual void
      pIndex ();

      virtual void
      Length ();

      virtual void
      pLength ();

      virtual void
      AccessMode ();

      virtual void
      pPort ();

      virtual void
      Cachable ();

      virtual void
      PollingTime ();

      virtual void
      pInvalidator ();

      virtual void
      Endianess ();

      virtual void
      StructEntry ();

      virtual void
      post_StructRegType ();
    };

    class StructEntryType_pimpl: public StructEntryType_pskel
    {
      public:
	  CNodeMapDataPtrsWithCleanup nodeMapDataPtrs;

	  virtual void
	  _reset();
	  
      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      AccessMode ();

      virtual void
      Cachable ();

      virtual void
      PollingTime ();

      virtual void
      Streamable ();

      virtual void
      Bit ();

      virtual void
      LSB ();

      virtual void
      MSB ();

      virtual void
      Sign ();

      virtual void
      Unit ();

      virtual void
      Representation ();

      virtual void
      pSelected ();

      virtual void
      post_StructEntryType ();
    };

    class CommandType_pimpl: public CommandType_pskel
    {
      public:
	  CNodeMapDataPtrsWithCleanup nodeMapDataPtrs;

	  virtual void
	  _reset();
	  
      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      Value ();

      virtual void
      pValue ();

      virtual void
      CommandValue ();

      virtual void
      pCommandValue ();

      virtual void
      PollingTime ();

      virtual void
      post_CommandType ();
    };

    class BooleanType_pimpl: public BooleanType_pskel
    {
      public:
	  CNodeMapDataPtrsWithCleanup nodeMapDataPtrs;

	  virtual void
	  _reset();
	  
      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      Streamable ();

      virtual void
      Value (bool);

      virtual void
      pValue ();

      virtual void
      OnValue ();

      virtual void
      OffValue ();

      virtual void
      pSelected ();

      virtual void
      post_BooleanType ();
    };

    class FloatType_pimpl: public FloatType_pskel
    {
      public:
	  CNodeMapDataPtrsWithCleanup nodeMapDataPtrs;

	  virtual void
	  _reset();
	  
      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      Streamable ();

      virtual void
      Value (double);

      virtual void
      pValue ();

      virtual void
      pIndex ();

      virtual void
      ValueIndexed ();

      virtual void
      pValueIndexed ();

      virtual void
      ValueDefault (double);

      virtual void
      pValueDefault ();

      virtual void
      Min (double);

      virtual void
      pMin ();

      virtual void
      Max (double);

      virtual void
      pMax ();

      virtual void
      Inc (double);

      virtual void
      pInc ();

      virtual void
      Unit ();

      virtual void
      Representation ();

      virtual void
      DisplayNotation ();

      virtual void
      DisplayPrecision ();

      virtual void
      post_FloatType ();
    };

    class ConverterType_pimpl: public ConverterType_pskel
    {
      public:
	  CNodeMapDataPtrsForConverterWithCleanup nodeMapDataPtrs;

	  virtual void
	  _reset();
	  
      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      Streamable ();

      virtual void
      pVariable ();

      virtual void
      Constant ();

      virtual void
      Expression ();

      virtual void
      FormulaTo (const ::std::string&);

      virtual void
      FormulaFrom (const ::std::string&);

      virtual void
      pValue ();

      virtual void
      Unit ();

      virtual void
      Representation ();

      virtual void
      DisplayNotation ();

      virtual void
      DisplayPrecision ();

      virtual void
      Slope ();

      virtual void
      IsLinear ();

      virtual void
      post_ConverterType ();
    };

    class IntConverterType_pimpl: public IntConverterType_pskel
    {
      public:
	  CNodeMapDataPtrsForConverterWithCleanup nodeMapDataPtrs;
	  
	  virtual void
	  _reset();
	  
      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      Streamable ();

      virtual void
      pVariable ();

      virtual void
      Constant ();

      virtual void
      Expression ();

      virtual void
      FormulaTo (const ::std::string&);

      virtual void
      FormulaFrom (const ::std::string&);

      virtual void
      pValue ();

      virtual void
      Unit ();

      virtual void
      Representation ();

      virtual void
      Slope ();

      virtual void
      post_IntConverterType ();
    };

    class FloatRegType_pimpl: public FloatRegType_pskel
    {
      public:
	  CNodeMapDataPtrsWithCleanup nodeMapDataPtrs;

	  virtual void
	  _reset();
	  
      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      Streamable ();

      virtual void
      Address ();

      virtual void
      IntSwissKnife ();

      virtual void
      pAddress ();

      virtual void
      pIndex ();

      virtual void
      Length ();

      virtual void
      pLength ();

      virtual void
      AccessMode ();

      virtual void
      pPort ();

      virtual void
      Cachable ();

      virtual void
      PollingTime ();

      virtual void
      pInvalidator ();

      virtual void
      Endianess ();

      virtual void
      Unit ();

      virtual void
      Representation ();

      virtual void
      DisplayNotation ();

      virtual void
      DisplayPrecision ();

      virtual void
      post_FloatRegType ();
    };

    class EnumerationType_pimpl: public EnumerationType_pskel
    {
      public:
	  CNodeMapDataPtrsWithCleanup nodeMapDataPtrs;

	  virtual void
	  _reset();
	  
      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      Streamable ();

      virtual void
      EnumEntry ();

      virtual void
      Value ();

      virtual void
      pValue ();

      virtual void
      pSelected ();

      virtual void
      PollingTime ();

      virtual void
      post_EnumerationType ();
    };

    class EnumEntryType_pimpl: public EnumEntryType_pskel
    {
      public:
	  CNodeMapDataPtrsWithCleanup nodeMapDataPtrs;

	  virtual void
	  _reset();
	  
      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      Value ();

      virtual void
      NumericValue (double);

      virtual void
      Symbolic ();

      virtual void
      IsSelfClearing ();

      virtual void
      post_EnumEntryType ();
    };

    class StringType_pimpl: public StringType_pskel
    {
      public:
	  CNodeMapDataPtrsWithCleanup nodeMapDataPtrs;

	  virtual void
	  _reset();
	  
      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      Streamable ();

      virtual void
      Value (const ::std::string&);

      virtual void
      pValue ();

      virtual void
      post_StringType ();
    };

    class StringRegType_pimpl: public StringRegType_pskel
    {
      public:
	  CNodeMapDataPtrsWithCleanup nodeMapDataPtrs;

	  virtual void
	  _reset();
	  
      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      Streamable ();

      virtual void
      Address ();

      virtual void
      IntSwissKnife ();

      virtual void
      pAddress ();

      virtual void
      pIndex ();

      virtual void
      Length ();

      virtual void
      pLength ();

      virtual void
      AccessMode ();

      virtual void
      pPort ();

      virtual void
      Cachable ();

      virtual void
      PollingTime ();

      virtual void
      pInvalidator ();

      virtual void
      post_StringRegType ();
    };

    class RegisterType_pimpl: public RegisterType_pskel
    {
      public:
	  CNodeMapDataPtrsWithCleanup nodeMapDataPtrs;

	  virtual void
	  _reset();
	  
      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      Streamable ();

      virtual void
      Address ();

      virtual void
      IntSwissKnife ();

      virtual void
      pAddress ();

      virtual void
      pIndex ();

      virtual void
      Length ();

      virtual void
      pLength ();

      virtual void
      AccessMode ();

      virtual void
      pPort ();

      virtual void
      Cachable ();

      virtual void
      PollingTime ();

      virtual void
      pInvalidator ();

      virtual void
      post_RegisterType ();
    };

    class SwissKnifeType_pimpl: public SwissKnifeType_pskel
    {
      public:
	  CNodeMapDataPtrsWithCleanup nodeMapDataPtrs;

	  virtual void
	  _reset();
	  
      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      Streamable ();

      virtual void
      pVariable ();

      virtual void
      Constant ();

      virtual void
      Expression ();

      virtual void
      Formula (const ::std::string&);

      virtual void
      Unit ();

      virtual void
      Representation ();

      virtual void
      DisplayNotation ();

      virtual void
      DisplayPrecision ();

      virtual void
      post_SwissKnifeType ();
    };

    class IntSwissKnifeType_pimpl: public IntSwissKnifeType_pskel
    {
      public:
	  CNodeMapDataPtrsWithCleanup nodeMapDataPtrs;

	  virtual void
	  _reset();
	  
      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      Streamable ();

      virtual void
      pVariable ();

      virtual void
      Constant ();

      virtual void
      Expression ();

      virtual void
      Formula (const ::std::string&);

      virtual void
      Unit ();

      virtual void
      Representation ();

      virtual void
      post_IntSwissKnifeType ();
    };

	
    class CName_t_pimpl: public CName_t_pskel
    {
      public:
	  std::string text;

      CName_t_pimpl ();

      virtual void
      pre ();

      virtual void
      post_CName_t ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class pIndexType_pimpl: public pIndexType_pskel
    {
      public:
	  std::string text;
	  std::string textOffset;
	  std::string textpOffset;
	  
      pIndexType_pimpl ();

      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Offset ();

      virtual void
      pOffset ();

      virtual void
      post_pIndexType ();

      private:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pimpl base_impl_;
    };

    class PortType_pimpl: public PortType_pskel
    {
      public:
      CNodeMapDataPtrsWithCleanup nodeMapDataPtrs;

	  virtual void
	  _reset();

      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      ChunkID ();

      virtual void
      pChunkID ();

      virtual void
      SwapEndianess ();

      virtual void
      CacheChunkData ();

      virtual void
      post_PortType ();
    };

    class ConfRomType_pimpl: public ConfRomType_pskel
    {
      public:
      CNodeMapDataPtrsWithCleanup nodeMapDataPtrs;

	  virtual void
	  _reset();
	  
      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      pInvalidator ();

      virtual void
      Unit ();

      virtual void
      Address ();

      virtual void
      IntSwissKnife ();

      virtual void
      pAddress ();

      virtual void
      Length ();

      virtual void
      pPort ();

	  virtual void
      choice1_arm(choice1_arm_tag tag);

      virtual void
      TextDesc ();

      virtual void
      IntKey ();

      virtual void
      post_ConfRomType ();
    };

    class TextDescType_pimpl: public TextDescType_pskel
    {
      public:
      CNodeMapDataPtrsWithCleanup nodeMapDataPtrs;

	  virtual void
	  _reset();
	  	  
      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      p1212Parser ();

      virtual void
      Key ();

      virtual void
      post_TextDescType ();
    };

    class IntKeyType_pimpl: public IntKeyType_pskel
    {
      public:
      CNodeMapDataPtrsWithCleanup nodeMapDataPtrs;

	  virtual void
	  _reset();
	  
      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      p1212Parser ();

      virtual void
      Key ();

      virtual void
      post_IntKeyType ();
    };

    class DcamLockType_pimpl: public DcamLockType_pskel
    {
      public:
      CNodeMapDataPtrsWithCleanup nodeMapDataPtrs;

	  virtual void
	  _reset();
	  
      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      Extension ();

      virtual void
      ToolTip ();

      virtual void
      Description ();

      virtual void
      DisplayName ();

      virtual void
      Visibility ();

      virtual void
      DocuURL ();

      virtual void
      IsDeprecated ();

      virtual void
      EventID ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      pIsLocked ();

      virtual void
      pBlockPolling ();

      virtual void
      ImposedAccessMode ();

      virtual void
      pError ();

      virtual void
      pAlias ();

      virtual void
      pCastAlias ();

      virtual void
      Streamable ();

      virtual void
      Address ();

      virtual void
      IntSwissKnife ();

      virtual void
      pAddress ();

      virtual void
      pIndex ();

      virtual void
      Length ();

      virtual void
      pLength ();

      virtual void
      AccessMode ();

      virtual void
      pPort ();

      virtual void
      Cachable ();

      virtual void
      PollingTime ();

      virtual void
      pInvalidator ();

      virtual void
      FeatureID ();

      virtual void
      Timeout ();

      virtual void
      post_DcamLockType ();
    };

    class SmartFeatureAdrType_pimpl: public SmartFeatureAdrType_pskel
    {
      public:
      CNodeMapDataPtrsWithCleanup nodeMapDataPtrs;

	  virtual void
	  _reset();
	  
      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      MergePriority ();

      virtual void
      ExposeStatic ();

      // Elements.
      //
      virtual void
      FeatureID (const ::std::string&);

      virtual void
      Address ();

      virtual void
      IntSwissKnife ();

      virtual void
      pAddress ();

      virtual void
      pPort ();

      virtual void
      pIsImplemented ();

      virtual void
      pIsAvailable ();

      virtual void
      post_SmartFeatureAdrType ();
    };

    class ExtensionType_pimpl: public ExtensionType_pskel
    {
    public:
          // the extension node's content 
          std::string content;

    public:
        ExtensionType_pimpl();

      virtual void reset();
      virtual void pre ();

      virtual void
      post_ExtensionType ();


#ifndef XSDE_POLYMORPHIC
      virtual void
          _start_any_element(const xml_schema::ro_string& ns, const xml_schema::ro_string& name);
#else
      virtual void
          _start_any_element(const xml_schema::ro_string& ns, const xml_schema::ro_string& name, const char*);
#endif

      virtual void
          _any_characters(const xml_schema::ro_string& c);

      virtual void
          _end_any_element(const xml_schema::ro_string& ns, const xml_schema::ro_string& name);

      virtual void _any_attribute(const xml_schema::ro_string& ns, const xml_schema::ro_string& name, const xml_schema::ro_string& value);

     };

    class UpperCaseString_t_pimpl: public UpperCaseString_t_pskel
    {
      public:
	  std::string text;

      UpperCaseString_t_pimpl ();

      virtual void
      pre ();

      virtual void
      post_UpperCaseString_t ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class nonEmptyString_t_pimpl: public nonEmptyString_t_pskel
    {
      public:
  	  std::string text;

      nonEmptyString_t_pimpl ();

      virtual void
      pre ();

      virtual void
      post_nonEmptyString_t ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class CachingMode_te_pimpl: public CachingMode_te_pskel
    {
      public:
	  std::string text;

      CachingMode_te_pimpl ();

      virtual void
      pre ();

      virtual void
      post_CachingMode_te ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class HexOrDecimal_t_pimpl: public HexOrDecimal_t_pskel
    {
      public:
   	  std::string text;

	  HexOrDecimal_t_pimpl ();

      virtual void
      pre ();

      virtual void
      post_HexOrDecimal_t ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class Hex_t_pimpl: public Hex_t_pskel
    {
      public:
  	  std::string text;

      Hex_t_pimpl ();

      virtual void
      pre ();

      virtual void
      post_Hex_t ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class PositiveHexOrDecimal_t_pimpl: public PositiveHexOrDecimal_t_pskel
    {
      public:
      std::string text;
	  PositiveHexOrDecimal_t_pimpl ();

      virtual void
      pre ();

      virtual void
      post_PositiveHexOrDecimal_t ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class nonNegativeHexOrDecimal_t_pimpl: public nonNegativeHexOrDecimal_t_pskel
    {
      public:
      std::string text;

      nonNegativeHexOrDecimal_t_pimpl ();

      virtual void
      pre ();

      virtual void
      post_nonNegativeHexOrDecimal_t ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class IntegerLength_t_pimpl: public IntegerLength_t_pskel
    {
      public:
      std::string text;

	  IntegerLength_t_pimpl ();

      virtual void
      pre ();

      virtual void
      post_IntegerLength_t ();

      private:
      ::xml_schema::integer_pimpl base_impl_;
    };

    class FloatLength_t_pimpl: public FloatLength_t_pskel
    {
      public:
      std::string text;

	  FloatLength_t_pimpl ();

      virtual void
      pre ();

      virtual void
      post_FloatLength_t ();

      private:
      ::xml_schema::integer_pimpl base_impl_;
    };

    class MergePriority_t_pimpl: public MergePriority_t_pskel
    {
      public:
	  long longValue;
	  
      MergePriority_t_pimpl ();

      virtual void
      pre ();

      virtual void
      post_MergePriority_t ();

      private:
      ::xml_schema::integer_pimpl base_impl_;
    };

    class GUID_t_pimpl: public GUID_t_pskel
    {
      public:
	  std::string text;
	  
      GUID_t_pimpl ();

      virtual void
      pre ();

      virtual void
      post_GUID_t ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class Sign_te_pimpl: public Sign_te_pskel
    {
      public:
	  std::string text;
	  
      Sign_te_pimpl ();

      virtual void
      pre ();

      virtual void
      post_Sign_te ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class SwissKnifeConversion_t_pimpl: public SwissKnifeConversion_t_pskel
    {
      public:
	  std::string text;
	  std::string textInput;
	  
      SwissKnifeConversion_t_pimpl ();

      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Input ();

      virtual void
      post_SwissKnifeConversion_t ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class NameSpace_t_pimpl: public NameSpace_t_pskel
    {
      public:
	  std::string text;
	  
      NameSpace_t_pimpl ();

      virtual void
      pre ();

      virtual void
      post_NameSpace_t ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class NameSpace_te_pimpl: public NameSpace_te_pskel
    {
      public:
	  std::string text;
	  
      NameSpace_te_pimpl ();

      virtual void
      pre ();

      virtual void
      post_NameSpace_te ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class StandardNameSpace_t_pimpl: public StandardNameSpace_t_pskel
    {
      public:
	  std::string text;
	  
      StandardNameSpace_t_pimpl ();

      virtual void
      pre ();

      virtual void
      post_StandardNameSpace_t ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class IntRepresentation_t_pimpl: public IntRepresentation_t_pskel
    {
      public:
	  std::string text;
	  
      IntRepresentation_t_pimpl ();

      virtual void
      pre ();

      virtual void
      post_IntRepresentation_t ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class FloatRepresentation_t_pimpl: public FloatRepresentation_t_pskel
    {
      public:
	  std::string text;
	  
      FloatRepresentation_t_pimpl ();

      virtual void
      pre ();

      virtual void
      post_FloatRepresentation_t ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class Access_te_pimpl: public Access_te_pskel
    {
      public:
	  std::string text;
	  
      Access_te_pimpl ();

      virtual void
      pre ();

      virtual void
      post_Access_te ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class Endianess_te_pimpl: public Endianess_te_pskel
    {
      public:
	  std::string text;
	  
      Endianess_te_pimpl ();

      virtual void
      pre ();

      virtual void
      post_Endianess_te ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class Visibility_te_pimpl: public Visibility_te_pskel
    {
      public:
	  std::string text;
	  
      Visibility_te_pimpl ();

      virtual void
      pre ();

      virtual void
      post_Visibility_te ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class YesNo_t_pimpl: public YesNo_t_pskel
    {
      public:
	  std::string text;
	  
      YesNo_t_pimpl ();

      virtual void
      pre ();

      virtual void
      post_YesNo_t ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class YesNo_te_pimpl: public YesNo_te_pskel
    {
      public:
	  std::string text;
	  
      YesNo_te_pimpl ();

      virtual void
      pre ();

      virtual void
      post_YesNo_te ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class Slope_te_pimpl: public Slope_te_pskel
    {
      public:
	  std::string text;
	  
      Slope_te_pimpl ();

      virtual void
      pre ();

      virtual void
      post_Slope_te ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class Key_t_pimpl: public Key_t_pskel
    {
      public:
	  CNodeMapDataPtrsWithCleanup nodeMapDataPtrs;

	  virtual void
	  _reset();
	  
      Key_t_pimpl ();

      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      NameSpace ();

      virtual void
      post_Key_t ();

      private:
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pimpl base_impl_;
    };

    class DisplayNotation_t_pimpl: public DisplayNotation_t_pskel
    {
      public:
	  std::string text;
	  
      DisplayNotation_t_pimpl ();

      virtual void
      pre ();

      virtual void
      post_DisplayNotation_t ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class VariableName_t_pimpl: public VariableName_t_pskel
    {
      public:
	  std::string text;
	  
      VariableName_t_pimpl ();

      virtual void
      pre ();

      virtual void
      post_VariableName_t ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class DocURL_t_pimpl: public DocURL_t_pskel
    {
      public:
	  std::string text;
	  
      DocURL_t_pimpl ();

      virtual void
      pre ();

      virtual void
      post_DocURL_t ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class RegisterDescription_pimpl: public RegisterDescription_pskel
    {
      public:
      CNodeMapDataPtrsWithCleanup nodeMapDataPtrs;

	  virtual void
	  _reset();
	  
      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      ModelName ();

      virtual void
      VendorName ();

      virtual void
      ToolTip (const ::std::string&);

      virtual void
      StandardNameSpace ();

      virtual void
      SchemaMajorVersion ();

      virtual void
      SchemaMinorVersion ();

      virtual void
      SchemaSubMinorVersion ();

      virtual void
      MajorVersion ();

      virtual void
      MinorVersion ();

      virtual void
      SubMinorVersion ();

      virtual void
      ProductGuid ();

      virtual void
      VersionGuid ();

      // Elements.
      //
      virtual void
      Node ();

      virtual void
      Category ();

      virtual void
      Integer ();

      virtual void
      IntReg ();

      virtual void
      MaskedIntReg ();

      virtual void
      Boolean ();

      virtual void
      Command ();

      virtual void
      Enumeration ();

	  virtual void
	  EnumEntry();

      virtual void
      Float ();

      virtual void
      FloatReg ();

      virtual void
      String ();

      virtual void
      StringReg ();

      virtual void
      Register ();

      virtual void
      Converter ();

      virtual void
      IntConverter ();

      virtual void
      SwissKnife ();

      virtual void
      IntSwissKnife ();

      virtual void
      Port ();

      virtual void
      ConfRom ();

      virtual void
      TextDesc ();

      virtual void
      IntKey ();

      virtual void
      AdvFeatureLock ();

      virtual void
      SmartFeature ();

      virtual void
      Group ();

      virtual void
      StructReg ();

      virtual void
      post_RegisterDescription ();
    };

    class ValueIndexed_pimpl: public ValueIndexed_pskel
    {
      public:
	  std::string text;
	  std::string textIndex;

      ValueIndexed_pimpl ();

      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Index ();

      virtual void
      post_ValueIndexed ();

      private:
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pimpl base_impl_;
    };

    class pValueIndexed_pimpl: public pValueIndexed_pskel
    {
      public:
	  std::string text;
	  std::string textIndex;
	  
      pValueIndexed_pimpl ();

      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Index ();

      virtual void
      post_pValueIndexed ();

      private:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pimpl base_impl_;
    };

    class ValueIndexed1_pimpl: public ValueIndexed1_pskel
    {
      public:
  	  double doubleValue;
	  std::string textIndex;

      ValueIndexed1_pimpl ();

      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Index ();

      virtual void
      post_ValueIndexed1 ();

      private:
      ::xml_schema::double_pimpl base_impl_;
    };

    class pValueIndexed1_pimpl: public pValueIndexed1_pskel
    {
      public:
  	  std::string text;
	  std::string textIndex;

      pValueIndexed1_pimpl ();

      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Index ();

      virtual void
      post_pValueIndexed1 ();

      private:
      ::GENAPI_NAMESPACE::Version_1_1::CName_t_pimpl base_impl_;
    };

    class pVariable_pimpl: public pVariable_pskel
    {
      public:
  	  std::string text;
	  std::string textName;

      pVariable_pimpl ();

      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      post_pVariable ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class Constant_pimpl: public Constant_pskel
    {
      public:
	  double doubleValue;
	  std::string textName;
	  
      Constant_pimpl ();

      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      post_Constant ();

      private:
      ::xml_schema::double_pimpl base_impl_;
    };

    class Expression_pimpl: public Expression_pskel
    {
      public:
  	  std::string text;
	  std::string textName;

      Expression_pimpl ();

      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      post_Expression ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class pVariable1_pimpl: public pVariable1_pskel
    {
      public:
  	  std::string text;
	  std::string textName;

      pVariable1_pimpl ();

      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      post_pVariable1 ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class Constant1_pimpl: public Constant1_pskel
    {
      public:
   	  std::string text;
	  std::string textName;
	  
	  Constant1_pimpl ();

      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      post_Constant1 ();

      private:
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pimpl base_impl_;
    };

    class Expression1_pimpl: public Expression1_pskel
    {
      public:
	  std::string text;
	  std::string textName;
	  
      Expression1_pimpl ();

      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      post_Expression1 ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class pVariable2_pimpl: public pVariable2_pskel
    {
      public:
	  std::string text;
	  std::string textName;

      pVariable2_pimpl ();

      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      post_pVariable2 ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class Constant2_pimpl: public Constant2_pskel
    {
      public:
	  double doubleValue;
	  std::string textName;

      Constant2_pimpl ();

      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      post_Constant2 ();

      private:
      ::xml_schema::double_pimpl base_impl_;
    };

    class Expression2_pimpl: public Expression2_pskel
    {
      public:
	  std::string text;
	  std::string textName;

      Expression2_pimpl ();

      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      post_Expression2 ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class pVariable3_pimpl: public pVariable3_pskel
    {
      public:
	  std::string text;
	  std::string textName;

      pVariable3_pimpl ();

      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      post_pVariable3 ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };

    class Constant3_pimpl: public Constant3_pskel
    {
      public:
	  std::string text;
	  std::string textName;

      Constant3_pimpl ();

      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      post_Constant3 ();

      private:
      ::GENAPI_NAMESPACE::Version_1_1::HexOrDecimal_t_pimpl base_impl_;
    };

    class Expression3_pimpl: public Expression3_pskel
    {
      public:
	  std::string text;
	  std::string textName;

      Expression3_pimpl ();

      virtual void
      pre ();

      // Attributes.
      //
      virtual void
      Name ();

      virtual void
      post_Expression3 ();

      private:
      ::xml_schema::string_pimpl base_impl_;
    };
  }
}

#endif // GEN_API_SCHEMA_VERSION_1_1_PIMPL_HXX
